<div id="pf114" class="pf w0 h0" data-page-no="114"><div class="pc pc114 w0 h0"><img class="bi x0 y8 w2 h5" alt="" src="bg114.png"/><div class="t m0 x10e h8 y6c3 ff1 fs5 fc0 sc0 ls0">NOTE</div><div class="t m0 x3e hf yf7 ff3 fs5 fc0 sc0 ls0 ws0">Any wait states inserted by the peripheral slave device</div><div class="t m0 x3e hf yf8 ff3 fs5 fc0 sc0 ls0 ws0">(sx_hready = 0) are simply passed through the BME back to the</div><div class="t m0 x3e hf yf9 ff3 fs5 fc0 sc0 ls0 ws0">master input bus, stalling the AHB transaction cycle for cycle.</div><div class="t m0 x9 h1b y18a5 ff1 fsc fc0 sc0 ls0 ws0">17.4.1.1<span class="_ _b"> </span>Decorated Store Logical AND (AND)</div><div class="t m0 x9 hf ya19 ff3 fs5 fc0 sc0 ls0 ws0">This command performs an atomic read-modify-write of the referenced memory location.</div><div class="t m0 x9 hf ya1a ff3 fs5 fc0 sc0 ls0 ws0">First, the location is read; it is then modified by performing a logical AND operation</div><div class="t m0 x9 hf y1395 ff3 fs5 fc0 sc0 ls0 ws0">using the write data operand sourced for the system bus cycle; finally, the result of the</div><div class="t m0 x9 hf y1396 ff3 fs5 fc0 sc0 ls0 ws0">AND operation is written back into the referenced memory location.</div><div class="t m0 x9 hf y1545 ff3 fs5 fc0 sc0 ls0 ws0">The data size is specified by the write operation and can be byte (8-bit), halfword (16-bit)</div><div class="t m0 x9 hf y18a6 ff3 fs5 fc0 sc0 ls0 ws0">or word (32-bit). The core performs the required write data lane replication on byte and</div><div class="t m0 x9 hf y18a7 ff3 fs5 fc0 sc0 ls0 ws0">halfword transfers.</div><div class="c x2c y18a8 w2a ha0"><div class="t m19 x9f ha1 y18a9 ff2 fs51 fc0 sc0 ls0 ws2ca">31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10<span class="_ _186"> </span>9<span class="_ _189"> </span>8<span class="_ _189"> </span>7<span class="_ _189"> </span>6<span class="_ _18d"> </span>5<span class="_ _189"> </span>4<span class="_ _189"> </span>3<span class="_ _189"> </span>2<span class="_ _189"> </span>1<span class="_ _189"> </span>0</div><div class="t m1c x0 ha2 y18aa ff6 fs52 fc0 sc0 ls1cd ws2cb">ioandb <span class="ff2 ls0 ws2cc">0<span class="_ _8f"> </span>1<span class="_ _90"> </span>0<span class="_ _90"> </span>0<span class="_ _8f"> </span>0<span class="_ _90"> </span>1<span class="_ _189"> </span>- - - - - -<span class="_ _1a4"> </span>mem_addr</span></div><div class="t m1c x0 ha3 y18ab ff6 fs52 fc0 sc0 ls1cd ws2cd">ioandh <span class="ff2 ls0 ws2cc v0">0<span class="_ _8f"> </span>1<span class="_ _90"> </span>0<span class="_ _90"> </span>0<span class="_ _8f"> </span>0<span class="_ _90"> </span>1<span class="_ _189"> </span>- - - - - -<span class="_ _1a4"> </span>mem_addr<span class="_ _117"> </span>0</span></div><div class="t m1c x0 ha4 y18ac ff6 fs52 fc0 sc0 ls1cd ws2cd">ioandw <span class="ff2 ls0 ws2cc v0">0<span class="_ _8f"> </span>1<span class="_ _90"> </span>0<span class="_ _90"> </span>0<span class="_ _8f"> </span>0<span class="_ _90"> </span>1<span class="_ _189"> </span>- - - - - -<span class="_ _1a5"> </span>mem_addr<span class="_ _20"> </span>0<span class="_ _8f"> </span>0</span></div></div><div class="t m0 x8 h9 y18ad ff1 fs2 fc0 sc0 ls0 ws0">Figure 17-3. Decorated store address: logical AND</div><div class="t m0 x9 hf y18ae ff3 fs5 fc0 sc0 ls0 ws0">where addr[28:26] = 001 specifies the AND operation, and mem_addr[19:0] specifies the</div><div class="t m0 x9 hf y18af ff3 fs5 fc0 sc0 ls0 ws0">address offset into the peripheral space based at 0x4000_0000. The &quot;-&quot; indicates an</div><div class="t m0 x9 hf y18b0 ff3 fs5 fc0 sc0 ls0 ws0">address bit &quot;don&apos;t care&quot;.</div><div class="t m0 x9 hf y18b1 ff3 fs5 fc0 sc0 ls0 ws0">The decorated AND write operation is defined in the following pseudo-code as:</div><div class="t m0 x9 ha5 y18b2 ff6 fs4 fc0 sc0 ls0 ws0">ioand&lt;sz&gt;(accessAddress, wdata)                 // decorated store AND</div><div class="t m0 x9 ha5 y18b3 ff6 fs4 fc0 sc0 ls0 ws0">tmp   =  mem[accessAddress &amp; 0xE00FFFFF, size]  // memory read</div><div class="t m0 x9 ha5 y18b4 ff6 fs4 fc0 sc0 ls0 ws0">tmp   =  tmp &amp; wdata                            // modify</div><div class="t m0 x9 ha5 y18b5 ff6 fs4 fc0 sc0 ls0 ws0">mem[accessAddress &amp; 0xE00FFFFF, size] = tmp     // memory write</div><div class="t m0 x9 hf y18b6 ff3 fs5 fc0 sc0 ls0 ws0">where the operand size &lt;sz&gt; is defined as b(yte, 8-bit), h(alfword, 16-bit) and w(ord, 32-</div><div class="t m0 x9 hf y18b7 ff3 fs5 fc0 sc0 ls0 ws0">bit). This notation is used throughout the document.</div><div class="t m0 x9 hf y18b8 ff3 fs5 fc0 sc0 ls0 ws0">In the cycle definition tables, the notation AHB_ap and AHB_dp refers to the address and</div><div class="t m0 x9 hf y18b9 ff3 fs5 fc0 sc0 ls0 ws0">data phases of the BME AHB transaction. The cycle-by-cycle BME operations are</div><div class="t m0 x9 hf y18ba ff3 fs5 fc0 sc0 ls0 ws0">detailed in the following table.</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Functional Description</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">276<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
