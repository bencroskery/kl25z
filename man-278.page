<div id="pf116" class="pf w0 h0" data-page-no="116"><div class="pc pc116 w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg116.png"/><div class="t m0 xed h9 y1a5 ff1 fs2 fc0 sc0 ls0 ws0">Table 17-2.<span class="_ _1a"> </span>Cycle definitions of decorated store: logical OR</div><div class="t m0 x94 h10 y1a6 ff1 fs4 fc0 sc0 ls0 ws0">Pipeline Stage<span class="_ _11a"> </span>Cycle</div><div class="t m0 x27 h10 y1a7 ff1 fs4 fc0 sc0 ls0 ws2ce">x<span class="_ _133"> </span>x+1 x+2</div><div class="t m0 x97 h7 y18bb ff2 fs4 fc0 sc0 ls0 ws0">BME AHB_ap<span class="_ _103"> </span>Forward addr to memory;</div><div class="t m0 x15 h7 y18bc ff2 fs4 fc0 sc0 ls0 ws0">Decode decoration; Convert</div><div class="t m0 x15 h7 y18bd ff2 fs4 fc0 sc0 ls0 ws0">master_wt to slave_rd;</div><div class="t m0 x15 h7 y18be ff2 fs4 fc0 sc0 ls0 ws0">Capture address, attributes</div><div class="t m0 x2d h7 y18bb ff2 fs4 fc0 sc0 ls0 ws0">Recirculate captured addr +</div><div class="t m0 x2d h7 y18bc ff2 fs4 fc0 sc0 ls0 ws0">attr to memory as slave_wt</div><div class="t m0 x141 h7 y18bb ff2 fs4 fc0 sc0 ls0">&lt;next&gt;</div><div class="t m0 x97 h7 y18bf ff2 fs4 fc0 sc0 ls0 ws0">BME AHB_dp<span class="_ _30"> </span>&lt;previous&gt;<span class="_ _98"> </span>Perform memory read; Form</div><div class="t m0 x2d h7 y18c0 ff2 fs4 fc0 sc0 ls0 ws0">(rdata | wdata) and capture</div><div class="t m0 x2d h7 y18c1 ff2 fs4 fc0 sc0 ls0 ws0">destination data in register</div><div class="t m0 x72 h7 y18bf ff2 fs4 fc0 sc0 ls0 ws0">Perform write sending</div><div class="t m0 x72 h7 y18c0 ff2 fs4 fc0 sc0 ls0 ws0">registered data to memory</div><div class="t m0 x9 h1b y18c2 ff1 fsc fc0 sc0 ls0 ws0">17.4.1.3<span class="_ _b"> </span>Decorated Store: Logical XOR (XOR)</div><div class="t m0 x9 hf y18c3 ff3 fs5 fc0 sc0 ls0 ws0">This command performs an atomic read-modify-write of the referenced memory location.</div><div class="t m0 x9 hf y18c4 ff3 fs5 fc0 sc0 ls0 ws0">First, the location is read; it is then modified by performing a logical XOR (exclusive-</div><div class="t m0 x9 hf y18c5 ff3 fs5 fc0 sc0 ls0 ws0">OR) operation using the write data operand sourced for the system bus cycle; finally, the</div><div class="t m0 x9 hf y18c6 ff3 fs5 fc0 sc0 ls0 ws0">result of the XOR operation is written back into the referenced memory location.</div><div class="t m0 x9 hf y18c7 ff3 fs5 fc0 sc0 ls0 ws0">The data size is specified by the write operation and can be byte (8-bit), halfword (16-bit)</div><div class="t m0 x9 hf y18c8 ff3 fs5 fc0 sc0 ls0 ws0">or word (32-bit). The core performs the required write data lane replication on byte and</div><div class="t m0 x9 hf y18c9 ff3 fs5 fc0 sc0 ls0 ws0">halfword transfers.</div><div class="c x2c y18ca w2c ha6"><div class="t m19 x9f ha1 y18d9 ff2 fs51 fc0 sc0 ls0 ws2ca">31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10<span class="_ _186"> </span>9<span class="_ _189"> </span>8<span class="_ _189"> </span>7<span class="_ _189"> </span>6<span class="_ _18d"> </span>5<span class="_ _189"> </span>4<span class="_ _189"> </span>3<span class="_ _189"> </span>2<span class="_ _189"> </span>1<span class="_ _189"> </span>0</div><div class="t m1c x0 ha2 y18da ff6 fs52 fc0 sc0 ls1cd ws2d4">ioxorb <span class="ff2 ls0 ws2d5">0 1 0 0 1 1<span class="_ _18d"> </span>-<span class="_ _8"> </span>-<span class="_ _7"> </span>-<span class="_ _7"> </span>-<span class="_ _7"> </span>-<span class="_ _8"> </span>-<span class="_ _1a4"> </span>mem_addr</span></div><div class="t m1c x0 ha4 y18db ff6 fs52 fc0 sc0 ls1cd ws2d6">ioxorh <span class="ff2 ls0 ws2d5 v0">0 1 0 0 1 1<span class="_ _18d"> </span>-<span class="_ _8"> </span>-<span class="_ _7"> </span>-<span class="_ _7"> </span>-<span class="_ _7"> </span>-<span class="_ _8"> </span>-<span class="_ _1a4"> </span>mem_addr<span class="_ _117"> </span>0</span></div><div class="t m1c x0 ha3 y18dc ff6 fs52 fc0 sc0 ls1cd ws2d4">ioxorw <span class="ff2 ls0 ws2cc v0">0<span class="_ _8f"> </span>1<span class="_ _90"> </span>0<span class="_ _90"> </span>0<span class="_ _8f"> </span>1<span class="_ _90"> </span>1<span class="_ _189"> </span>- - - - - -<span class="_ _1a5"> </span>mem_addr<span class="_ _20"> </span>0<span class="_ _8f"> </span>0</span></div></div><div class="t m0 x2b h9 y18cf ff1 fs2 fc0 sc0 ls0 ws0">Figure 17-5. Decorated Address Store: Logical XOR</div><div class="t m0 x9 hf y18d0 ff3 fs5 fc0 sc0 ls0 ws0">where addr[28:26] = 011 specifies the XOR operation, and mem_addr[19:0] specifies the</div><div class="t m0 x9 hf y18d1 ff3 fs5 fc0 sc0 ls0 ws0">address offset into the peripheral space based at 0x4000_0000. The &quot;-&quot; indicates an</div><div class="t m0 x9 hf y18d2 ff3 fs5 fc0 sc0 ls0 ws0">address bit &quot;don&apos;t care&quot;.</div><div class="t m0 x9 hf y18d3 ff3 fs5 fc0 sc0 ls0 ws0">The decorated XOR write operation is defined in the following pseudo-code as:</div><div class="t m0 x9 ha5 y18d4 ff6 fs4 fc0 sc0 ls0 ws0">ioxor&lt;sz&gt;(accessAddress, wdata)                 // decorated store XOR</div><div class="t m0 x9 ha5 y18d5 ff6 fs4 fc0 sc0 ls0 ws0">tmp   =  mem[accessAddress &amp; 0xE00FFFFF, size]  // memory read</div><div class="t m0 x9 ha5 y18d6 ff6 fs4 fc0 sc0 ls0 ws0">tmp   =  tmp ^ wdata                            // modify</div><div class="t m0 x9 ha5 y18d7 ff6 fs4 fc0 sc0 ls0 ws0">mem[accessAddress &amp; 0xE00FFFFF, size] = tmp     // memory write</div><div class="t m0 x9 hf y18d8 ff3 fs5 fc0 sc0 ls0 ws0">The cycle-by-cycle BME operations are detailed in the following table.</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Functional Description</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">278<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
