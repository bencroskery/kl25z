<div id="pf117" class="pf w0 h0" data-page-no="117"><div class="pc pc117 w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg117.png"/><div class="t m0 xd3 h9 y1a5 ff1 fs2 fc0 sc0 ls0 ws0">Table 17-3.<span class="_ _1a"> </span>Cycle definitions of decorated store: logical XOR</div><div class="t m0 x94 h10 y1a6 ff1 fs4 fc0 sc0 ls0 ws0">Pipeline Stage<span class="_ _11a"> </span>Cycle</div><div class="t m0 x27 h10 y1a7 ff1 fs4 fc0 sc0 ls0 ws2ce">x<span class="_ _133"> </span>x+1 x+2</div><div class="t m0 x97 h7 y18bb ff2 fs4 fc0 sc0 ls0 ws0">BME AHB_ap<span class="_ _103"> </span>Forward addr to memory;</div><div class="t m0 x15 h7 y18bc ff2 fs4 fc0 sc0 ls0 ws0">Decode decoration; Convert</div><div class="t m0 x15 h7 y18bd ff2 fs4 fc0 sc0 ls0 ws0">master_wt to slave_rd;</div><div class="t m0 x15 h7 y18be ff2 fs4 fc0 sc0 ls0 ws0">Capture address, attributes</div><div class="t m0 x2d h7 y18bb ff2 fs4 fc0 sc0 ls0 ws0">Recirculate captured addr +</div><div class="t m0 x2d h7 y18bc ff2 fs4 fc0 sc0 ls0 ws0">attr to memory as slave_wt</div><div class="t m0 x141 h7 y18bb ff2 fs4 fc0 sc0 ls0">&lt;next&gt;</div><div class="t m0 x97 h7 y18bf ff2 fs4 fc0 sc0 ls0 ws0">BME AHB_dp<span class="_ _30"> </span>&lt;previous&gt;<span class="_ _98"> </span>Perform memory read; Form</div><div class="t m0 x2d h7 y18c0 ff2 fs4 fc0 sc0 ls0 ws0">(rdata ^ wdata) and capture</div><div class="t m0 x2d h7 y18c1 ff2 fs4 fc0 sc0 ls0 ws0">destination data in register</div><div class="t m0 x72 h7 y18bf ff2 fs4 fc0 sc0 ls0 ws0">Perform write sending</div><div class="t m0 x72 h7 y18c0 ff2 fs4 fc0 sc0 ls0 ws0">registered data to memory</div><div class="t m0 x9 h1b y18c2 ff1 fsc fc0 sc0 ls0 ws0">17.4.1.4<span class="_ _b"> </span>Decorated Store Bit Field Insert (BFI)</div><div class="t m0 x9 hf y18c3 ff3 fs5 fc0 sc0 ls0 ws0">This command inserts a bit field contained in the write data operand, defined by LSB</div><div class="t m0 x9 hf y18c4 ff3 fs5 fc0 sc0 ls0 ws0">position (b) and the bit field width (w+1), into the memory &quot;container&quot; defined by the</div><div class="t m0 x9 hf y18c5 ff3 fs5 fc0 sc0 ls0 ws0">access size associated with the store instruction using an atomic read-modify-write</div><div class="t m0 x9 hf y18c6 ff3 fs5 fc0 sc0 ls0">sequence.</div><div class="t m0 x9 hf y18c7 ff3 fs5 fc0 sc0 ls0 ws0">The data size is specified by the write operation and can be byte (8-bit), halfword (16-bit)</div><div class="t m0 x9 hf y18c8 ff3 fs5 fc0 sc0 ls0 ws0">or word (32-bit). Note for the word sized operation, the maximum bit field width is 16</div><div class="t m0 x9 hf y18c9 ff3 fs5 fc0 sc0 ls0 ws0">bits. The core performs the required write data lane replication on byte and halfword</div><div class="t m0 x9 hf y18dd ff3 fs5 fc0 sc0 ls0">transfers.</div><div class="t m0 x9 hf y18de ff3 fs5 fc0 sc0 ls0 ws0">The BFI operation can be used to insert a single bit into a peripheral. For this case, the w</div><div class="t m0 x9 hf y18df ff3 fs5 fc0 sc0 ls0 ws0">field is simply set to 0, indicating a bit field width of 1.</div><div class="c x2c y18e0 w2d ha6"><div class="t m19 x9f ha1 y18e1 ff2 fs51 fc0 sc0 ls0 ws2ca">31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10<span class="_ _186"> </span>9<span class="_ _189"> </span>8<span class="_ _189"> </span>7<span class="_ _189"> </span>6<span class="_ _18d"> </span>5<span class="_ _189"> </span>4<span class="_ _189"> </span>3<span class="_ _189"> </span>2<span class="_ _189"> </span>1<span class="_ _189"> </span>0</div><div class="t m1c x0 ha2 y18e2 ff6 fs52 fc0 sc0 ls1cd ws2d6">iobfib <span class="ff2 ls0 ws2d7">0<span class="_ _8f"> </span>1<span class="_ _90"> </span>0<span class="_ _90"> </span>1<span class="_ _18d"> </span>-<span class="_ _8"> </span>-<span class="_ _18d"> </span>b<span class="_ _90"> </span>b<span class="_ _90"> </span>b<span class="_ _18d"> </span>-<span class="_ _196"> </span>w w w<span class="_ _169"> </span>mem_addr</span></div><div class="t m1c x0 ha4 y18e3 ff6 fs52 fc0 sc0 ls1cd ws2d4">iobfih <span class="ff2 ls0 ws2d7 v0">0<span class="_ _8f"> </span>1<span class="_ _90"> </span>0<span class="_ _90"> </span>1<span class="_ _18d"> </span>-<span class="_ _189"> </span>b<span class="_ _90"> </span>b<span class="_ _8f"> </span>b<span class="_ _90"> </span>b<span class="_ _1a"> </span>w w w w<span class="_ _169"> </span>mem_addr<span class="_ _a6"> </span>0</span></div><div class="t m1c x0 ha3 y18e4 ff6 fs52 fc0 sc0 ls1cd ws2d4">iobfiw <span class="ff2 ls0 ws2d8 v0">0 1 0 1 b b b b<span class="_ _90"> </span>b<span class="_ _1a"> </span>w<span class="_ _110"> </span>w<span class="_ _110"> </span>w<span class="_ _1a6"> </span>w<span class="_ _169"> </span>mem_addr<span class="_ _15d"> </span>0 0</span></div></div><div class="t m0 x3c h9 y18e5 ff1 fs2 fc0 sc0 ls0 ws0">Figure 17-6. Decorated address store: bit field insert</div><div class="t m0 x9 hf y18e6 ff3 fs5 fc0 sc0 ls0 ws0">where addr[28] = 1 signals a BFI operation, addr[27:23] is &quot;b&quot;, the LSB identifier,</div><div class="t m0 x9 hf y18e7 ff3 fs5 fc0 sc0 ls0 ws0">addr[22:19] is &quot;w&quot;, the bit field width minus 1 identifier, and addr[18:0] specifies the</div><div class="t m0 x9 hf y18e8 ff3 fs5 fc0 sc0 ls0 ws0">address offset into the peripheral space based at 0x4000_0000. The &quot;-&quot; indicates an</div><div class="t m0 x9 hf y176a ff3 fs5 fc0 sc0 ls0 ws0">address bit &quot;don&apos;t care&quot;. Note, unlike the other decorated store operations, BFI uses</div><div class="t m0 x9 hf y18e9 ff3 fs5 fc0 sc0 ls0 ws0">addr[19] as the least significant bit in the &quot;w&quot; specifier and not as an address bit.</div><div class="t m0 x9 hf y18ea ff3 fs5 fc0 sc0 ls0 ws0">The decorated BFI write operation is defined in the following pseudo-code as:</div><div class="t m0 x9 ha5 y18eb ff6 fs4 fc0 sc0 ls0 ws0">iobfi&lt;sz&gt;(accessAddress, wdata)                 // decorated bit field insert</div><div class="t m0 x9 ha5 y18ec ff6 fs4 fc0 sc0 ls0 ws0">tmp   =  mem[accessAddress &amp; 0xE007FFFF, size]  // memory read</div><div class="t m0 x9 ha5 y18ed ff6 fs4 fc0 sc0 ls0 ws0">mask  = ((1 &lt;&lt; (w+1)) - 1) &lt;&lt; b                 // generate bit mask</div><div class="t m0 xeb h10 y141 ff1 fs4 fc0 sc0 ls0 ws0">Chapter 17 Bit Manipulation Engine (BME)</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">Freescale Semiconductor, Inc.<span class="_ _113"> </span>279</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
