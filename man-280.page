<div id="pf118" class="pf w0 h0" data-page-no="118"><div class="pc pc118 w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg118.png"/><div class="t m0 x9 ha5 y18ee ff6 fs4 fc0 sc0 ls0 ws0">tmp   =  tmp   &amp; ~mask                          // modify</div><div class="t m0 x9 ha5 y18ef ff6 fs4 fc0 sc0 ls0 ws0">      |  wdata &amp;  mask</div><div class="t m0 x9 ha5 y18f0 ff6 fs4 fc0 sc0 ls0 ws0">mem[accessAddress &amp; 0xE007FFFF, size] = tmp     // memory write</div><div class="t m0 x9 hf y18f1 ff3 fs5 fc0 sc0 ls0 ws0">The write data operand (wdata) associated with the store instruction contains the bit field</div><div class="t m0 x9 hf y18f2 ff3 fs5 fc0 sc0 ls0 ws0">to be inserted. It must be properly aligned within a right-justified container, that is, within</div><div class="t m0 x9 hf y18f3 ff3 fs5 fc0 sc0 ls0 ws0">the lower 8 bits for a byte operation, the lower 16 bits for a halfword or the entire 32 bits</div><div class="t m0 x9 hf y18f4 ff3 fs5 fc0 sc0 ls0 ws0">for a word operation.</div><div class="t m0 x9 hf y18f5 ff3 fs5 fc0 sc0 ls0 ws0">To illustrate, consider the following example of the insertion of the 3-bit field &quot;xyz&quot; into</div><div class="t m0 x9 hf y18f6 ff3 fs5 fc0 sc0 ls0 ws0">an 8-bit memory container, initially set to &quot;abcd_efgh&quot;. For all cases, w is 2, signaling a</div><div class="t m0 x9 hf y18f7 ff3 fs5 fc0 sc0 ls0 ws0">bit field width of 3.</div><div class="t m0 x9 ha5 y18f8 ff6 fs4 fc0 sc0 ls0 ws0">if b = 0 and the decorated store (strb) Rt register[7:0] = ----_-xyz,</div><div class="t m0 x9 ha5 y18f9 ff6 fs4 fc0 sc0 ls0 ws0">   then destination is &quot;abcd_exyz&quot;</div><div class="t m0 x9 ha5 y18fa ff6 fs4 fc0 sc0 ls0 ws0">if b = 1 and the decorated store (strb) Rt register[7:0] = ----_xyz-, </div><div class="t m0 x9 ha5 y18fb ff6 fs4 fc0 sc0 ls0 ws0">   then destination is &quot;abcd_xyzh&quot;</div><div class="t m0 x9 ha5 y18fc ff6 fs4 fc0 sc0 ls0 ws0">if b = 2 and the decorated store (strb) Rt register[7:0] = ---x_yz--, </div><div class="t m0 x9 ha5 y18fd ff6 fs4 fc0 sc0 ls0 ws0">   then destination is &quot;abcx_yzgh&quot;</div><div class="t m0 x9 ha5 y18fe ff6 fs4 fc0 sc0 ls0 ws0">if b = 3 and the decorated store (strb) Rt register[7:0] = --xy_z---, </div><div class="t m0 x9 ha5 y18ff ff6 fs4 fc0 sc0 ls0 ws0">   then destination is &quot;abxy_zfgh&quot;</div><div class="t m0 x9 ha5 y1900 ff6 fs4 fc0 sc0 ls0 ws0">if b = 4 and the decorated store (strb) Rt register[7:0] = -xyz_----, </div><div class="t m0 x9 ha5 y1901 ff6 fs4 fc0 sc0 ls0 ws0">   then destination is &quot;axyz_efgh&quot;</div><div class="t m0 x9 ha5 y1902 ff6 fs4 fc0 sc0 ls0 ws0">if b = 5 and the decorated store (strb) Rt register[7:0] = xyz-_----, </div><div class="t m0 x9 ha5 y1903 ff6 fs4 fc0 sc0 ls0 ws0">   then destination is &quot;xyzd_efgh&quot;</div><div class="t m0 x9 ha5 y1904 ff6 fs4 fc0 sc0 ls0 ws0">if b = 6 and the decorated store (strb) Rt register[7:0] = yz--_----, </div><div class="t m0 x9 ha5 y1905 ff6 fs4 fc0 sc0 ls0 ws0">   then destination is &quot;yzcd_efgh&quot;</div><div class="t m0 x9 ha5 y1906 ff6 fs4 fc0 sc0 ls0 ws0">if b = 7 and the decorated store (strb) Rt register[7:0] = z---_----, </div><div class="t m0 x9 ha5 y1907 ff6 fs4 fc0 sc0 ls0 ws0">   then destination is &quot;zbcd_efgh&quot;</div><div class="t m0 x9 hf y1908 ff3 fs5 fc0 sc0 ls0 ws0">Note from the example, when the starting bit position plus the field width exceeds the</div><div class="t m0 x9 hf y1909 ff3 fs5 fc0 sc0 ls0 ws0">container size, only part of the source bit field is inserted into the destination memory</div><div class="t m0 x9 hf y190a ff3 fs5 fc0 sc0 ls0 ws0">location. Stated differently, if (b + w+1) &gt; container_width, only the low-order</div><div class="t m0 x9 hf y190b ff3 fs5 fc0 sc0 ls0 ws0">&quot;container_width - b&quot; bits are actually inserted.</div><div class="t m0 x9 hf y190c ff3 fs5 fc0 sc0 ls0 ws0">The cycle-by-cycle BME operations are detailed in the following table.</div><div class="t m0 x3e h9 y190d ff1 fs2 fc0 sc0 ls0 ws0">Table 17-4.<span class="_ _1a"> </span>Cycle definitions of decorated store: bit field insert</div><div class="t m0 x94 h10 y190e ff1 fs4 fc0 sc0 ls0 ws0">Pipeline Stage<span class="_ _11a"> </span>Cycle</div><div class="t m0 x27 h10 y190f ff1 fs4 fc0 sc0 ls0 ws2ce">x<span class="_ _133"> </span>x+1 x+2</div><div class="t m0 x97 h7 y1910 ff2 fs4 fc0 sc0 ls0 ws0">BME AHB_ap<span class="_ _103"> </span>Forward addr to memory;</div><div class="t m0 x15 h7 y1911 ff2 fs4 fc0 sc0 ls0 ws0">Decode decoration; Convert</div><div class="t m0 x15 h7 y1912 ff2 fs4 fc0 sc0 ls0 ws0">master_wt to slave_rd;</div><div class="t m0 x15 h7 y1913 ff2 fs4 fc0 sc0 ls0 ws0">Capture address, attributes</div><div class="t m0 x2d h7 y1910 ff2 fs4 fc0 sc0 ls0 ws0">Recirculate captured addr +</div><div class="t m0 x2d h7 y1911 ff2 fs4 fc0 sc0 ls0 ws0">attr to memory as slave_wt</div><div class="t m0 x141 h7 y1910 ff2 fs4 fc0 sc0 ls0">&lt;next&gt;</div><div class="t m0 x97 h7 y1914 ff2 fs4 fc0 sc0 ls0 ws0">BME AHB_dp<span class="_ _30"> </span>&lt;previous&gt;<span class="_ _98"> </span>Perform memory read; Form</div><div class="t m0 x2d h7 y1915 ff2 fs4 fc0 sc0 ls0 ws0">bit mask; Form bitwise</div><div class="t m0 x2d h7 y1916 ff2 fs4 fc0 sc0 ls0 ws0">((mask) ? wdata : rdata)) and</div><div class="t m0 x2d h7 y1917 ff2 fs4 fc0 sc0 ls0 ws0">capture destination data in</div><div class="t m0 x2d h7 y1918 ff2 fs4 fc0 sc0 ls0">register</div><div class="t m0 x72 h7 y1914 ff2 fs4 fc0 sc0 ls0 ws0">Perform write sending</div><div class="t m0 x72 h7 y1915 ff2 fs4 fc0 sc0 ls0 ws0">registered data to memory</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Functional Description</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">280<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
