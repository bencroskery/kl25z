<div id="pf11c" class="pf w0 h0" data-page-no="11c"><div class="pc pc11c w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg11c.png"/><div class="t m0 x9 h1b y2d7 ff1 fsc fc0 sc0 ls0 ws0">17.4.2.1<span class="_ _b"> </span>Decorated Load Load-and-Clear 1 Bit (LAC1)</div><div class="t m0 x9 hf ybf ff3 fs5 fc0 sc0 ls0 ws0">This command loads a 1-bit field defined by the LSB position (b) into the core&apos;s general</div><div class="t m0 x9 hf y282 ff3 fs5 fc0 sc0 ls0 ws0">purpose destination register (Rt) and zeroes the bit in the memory space after performing</div><div class="t m0 x9 hf y283 ff3 fs5 fc0 sc0 ls0 ws0">an atomic read-modify-write sequence.</div><div class="t m0 x9 hf ya31 ff3 fs5 fc0 sc0 ls0 ws0">The extracted one bit data field from the memory address is right justified and zero filled</div><div class="t m0 x9 hf ya19 ff3 fs5 fc0 sc0 ls0 ws0">in the operand returned to the core.</div><div class="t m0 x9 hf ya75 ff3 fs5 fc0 sc0 ls0 ws0">The data size is specified by the read operation and can be byte (8-bit), halfword (16-bit)</div><div class="t m0 x9 hf y62c ff3 fs5 fc0 sc0 ls0 ws0">or word (32-bit).</div><div class="c x142 y197b w2e had"><div class="t m1d x112 hae y197c ff2 fs55 fc0 sc0 ls0 ws2dd">31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10<span class="_ _186"> </span>9<span class="_ _189"> </span>8<span class="_ _18d"> </span>7<span class="_ _189"> </span>6<span class="_ _189"> </span>5<span class="_ _189"> </span>4<span class="_ _189"> </span>3<span class="_ _189"> </span>2<span class="_ _18d"> </span>1<span class="_ _189"> </span>0</div><div class="t m1c x143 haf y197d ff6 fs56 fc0 sc0 ls1d1 ws2de">iolac1b <span class="ff2 ls0 ws2df">0 1 0 0 1 0<span class="_ _18d"> </span>-<span class="_ _8"> </span>-<span class="_ _18d"> </span>b b b<span class="_ _189"> </span>-<span class="_ _e6"> </span>mem_addr</span></div><div class="t m1c x143 hb0 y197e ff6 fs56 fc0 sc0 ls1d1 ws2de">iolac1h <span class="ff2 ls0 ws2e0 v0">0 1 0 0 1 0<span class="_ _18d"> </span>-<span class="_ _189"> </span>b b b b<span class="_ _189"> </span>-<span class="_ _1a4"> </span>mem_addr<span class="_ _1a8"> </span>0</span></div><div class="t m1c x143 hb1 y197f ff6 fs56 fc0 sc0 ls1d1 ws2de">iolac1w <span class="ff2 ls0 ws2df v0">0 1 0 0 1 0 b b b b b<span class="_ _18d"> </span>-<span class="_ _1a4"> </span>mem_a<span class="_ _5"></span>ddr<span class="_ _26"> </span>0 0</span></div></div><div class="t m0 xd1 h9 y1980 ff1 fs2 fc0 sc0 ls0 ws0">Figure 17-9. Decorated load address: load-and-clear 1 bit</div><div class="t m0 x9 hf y1981 ff3 fs5 fc0 sc0 ls0 ws0">where addr[28:26] = 010 specifies the load-and-clear 1 bit operation, addr[25:21] is &quot;b&quot;,</div><div class="t m0 x9 hf y1982 ff3 fs5 fc0 sc0 ls0 ws0">the bit identifier, and mem_addr[19:0] specifies the address offset into the peripheral</div><div class="t m0 x9 hf y1983 ff3 fs5 fc0 sc0 ls0 ws0">space based at 0x4000_0000. The &quot;-&quot; indicates an address bit &quot;don&apos;t care&quot;.</div><div class="t m0 x9 hf y1984 ff3 fs5 fc0 sc0 ls0 ws0">The decorated Load-and-Clear 1 Bit read operation is defined in the following pseudo-</div><div class="t m0 x9 hf y1985 ff3 fs5 fc0 sc0 ls0 ws0">code as:</div><div class="t m0 x9 ha5 y1986 ff6 fs4 fc0 sc0 ls0 ws0">rdata =  iolac1&lt;sz&gt;(accessAddress)              // decorated load-and-clear 1</div><div class="t m0 x9 ha5 y1987 ff6 fs4 fc0 sc0 ls0 ws0">tmp   =  mem[accessAddress &amp; 0xE00FFFFF, size]  // memory read</div><div class="t m0 x9 ha5 y1988 ff6 fs4 fc0 sc0 ls0 ws0">mask  =  1 &lt;&lt; b                                 // generate bit mask</div><div class="t m0 x9 ha5 y1989 ff6 fs4 fc0 sc0 ls0 ws0">rdata = (tmp &amp;  mask) &gt;&gt; b                      // read data returned to core</div><div class="t m0 x9 ha5 y198a ff6 fs4 fc0 sc0 ls0 ws0">tmp   =  tmp &amp; ~mask                            // modify</div><div class="t m0 x9 ha5 y198b ff6 fs4 fc0 sc0 ls0 ws0">mem[accessAddress &amp; 0xE00FFFFF, size] = tmp     // memory write</div><div class="t m0 x9 hf y198c ff3 fs5 fc0 sc0 ls0 ws0">The cycle-by-cycle BME operations are detailed in the following table.</div><div class="t m0 xfb h9 y198d ff1 fs2 fc0 sc0 ls0 ws0">Table 17-5.<span class="_ _1a"> </span>Cycle definitions of decorated load: load-and-clear 1 bit</div><div class="t m0 x94 h10 y198e ff1 fs4 fc0 sc0 ls0 ws0">Pipeline Stage<span class="_ _11a"> </span>Cycle</div><div class="t m0 x27 h10 y198f ff1 fs4 fc0 sc0 ls0 ws2ce">x<span class="_ _133"> </span>x+1 x+2</div><div class="t m0 x97 h7 y1990 ff2 fs4 fc0 sc0 ls0 ws0">BME AHB_ap<span class="_ _103"> </span>Forward addr to memory;</div><div class="t m0 x15 h7 y1991 ff2 fs4 fc0 sc0 ls0 ws0">Decode decoration; Capture</div><div class="t m0 x15 h7 y1992 ff2 fs4 fc0 sc0 ls0 ws0">address, attributes</div><div class="t m0 x2d h7 y1990 ff2 fs4 fc0 sc0 ls0 ws0">Recirculate captured addr +</div><div class="t m0 x2d h7 y1991 ff2 fs4 fc0 sc0 ls0 ws0">attr to memory as slave_wt</div><div class="t m0 x141 h7 y1990 ff2 fs4 fc0 sc0 ls0">&lt;next&gt;</div><div class="t m0 x97 h7 y1993 ff2 fs4 fc0 sc0 ls0 ws0">BME AHB_dp<span class="_ _30"> </span>&lt;previous&gt;<span class="_ _98"> </span>Perform memory read; Form</div><div class="t m0 x2d h7 y1994 ff2 fs4 fc0 sc0 ls0 ws0">bit mask; Extract bit from</div><div class="t m0 x2d h7 y1995 ff2 fs4 fc0 sc0 ls0 ws0">rdata; Form (rdata &amp; ~mask)</div><div class="t m0 x2d h7 y1996 ff2 fs4 fc0 sc0 ls0 ws0">and capture destination data</div><div class="t m0 x2d h7 y1997 ff2 fs4 fc0 sc0 ls0 ws0">in register</div><div class="t m0 x72 h7 y1993 ff2 fs4 fc0 sc0 ls0 ws0">Return extracted bit to master;</div><div class="t m0 x72 h7 y1994 ff2 fs4 fc0 sc0 ls0 ws0">Perform write sending</div><div class="t m0 x72 h7 y1995 ff2 fs4 fc0 sc0 ls0 ws0">registered data to memory</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Functional Description</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">284<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
