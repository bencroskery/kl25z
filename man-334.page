<div id="pf14e" class="pf w0 h0" data-page-no="14e"><div class="pc pc14e w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg14e.png"/><div class="t m0 x45 h9 y1a5 ff1 fs2 fc0 sc0 ls0 ws0">Table 20-1.<span class="_ _1a"> </span>How AXBS grants control of a slave port to a master</div><div class="t m0 xaa h10 y1a6 ff1 fs4 fc0 sc0 ls0 ws0">When<span class="_ _e6"> </span>Then AXBS grants control to the requesting master</div><div class="t m0 x2c h7 y1a7 ff2 fs4 fc0 sc0 ls0 ws0">Both of the following are true:</div><div class="t m0 xb9 h7 y1a8 ff2 fs4 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>The current master is not running a transfer.</div><div class="t m0 xb9 h7 y1a9 ff2 fs4 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>The new requesting master&apos;s priority level is higher than</div><div class="t m0 x3a h7 y1db ff2 fs4 fc0 sc0 ls0 ws0">that of the current master.</div><div class="t m0 x2d h7 y1a7 ff2 fs4 fc0 sc0 ls0 ws0">At the next clock edge</div><div class="t m0 x2c h7 y1ab ff2 fs4 fc0 sc0 ls0 ws0">The requesting master&apos;s priority level is lower than the current</div><div class="t m0 x2c h7 y262 ff2 fs4 fc0 sc0 ls0">master.</div><div class="t m0 x2d h7 y1ab ff2 fs4 fc0 sc0 ls0 ws0">At the conclusion of one of the following cycles:</div><div class="t m0 x32 h7 y262 ff2 fs4 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>An IDLE cycle</div><div class="t m0 x32 h7 yeb6 ff2 fs4 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>A non-IDLE cycle to a location other than the current</div><div class="t m0 xbb h7 yeb7 ff2 fs4 fc0 sc0 ls0 ws0">slave port</div><div class="t m0 x9 h1b y1d8b ff1 fsc fc0 sc0 ls0 ws0">20.3.2.3<span class="_ _b"> </span>Round-robin priority operation</div><div class="t m0 x9 hf y1d8c ff3 fs5 fc0 sc0 ls0 ws0">When operating in round-robin mode, each master is assigned a relative priority based on</div><div class="t m0 x9 hf y1d8d ff3 fs5 fc0 sc0 ls0 ws0">the master port number. This relative priority is compared to the master port number (ID)</div><div class="t m0 x9 hf y1d8e ff3 fs5 fc0 sc0 ls0 ws0">of the last master to perform a transfer on the slave bus. The highest priority requesting</div><div class="t m0 x9 hf y1d8f ff3 fs5 fc0 sc0 ls0 ws0">master becomes owner of the slave bus at the next transfer boundary. Priority is based on</div><div class="t m0 x9 hf y1d90 ff3 fs5 fc0 sc0 ls0 ws0">how far ahead the ID of the requesting master is to the ID of the last master.</div><div class="t m0 x9 hf y1d91 ff3 fs5 fc0 sc0 ls0 ws0">After granted access to a slave port, a master may perform as many transfers as desired to</div><div class="t m0 x9 hf y1d92 ff3 fs5 fc0 sc0 ls0 ws0">that port until another master makes a request to the same slave port. The next master in</div><div class="t m0 x9 hf y1d93 ff3 fs5 fc0 sc0 ls0 ws0">line is granted access to the slave port at the next transfer boundary, or possibly on the</div><div class="t m0 x9 hf y1d94 ff3 fs5 fc0 sc0 ls0 ws0">next clock cycle if the current master has no pending access request.</div><div class="t m0 x9 hf y1d95 ff3 fs5 fc0 sc0 ls0 ws0">As an example of arbitration in round-robin mode, assume the crossbar is implemented</div><div class="t m0 x9 hf y1d96 ff3 fs5 fc0 sc0 ls0 ws0">with master ports 0, 1, 4, and 5. If the last master of the slave port was master 1, and</div><div class="t m0 x9 hf y1d97 ff3 fs5 fc0 sc0 ls0 ws0">master 0, 4 and 5 make simultaneous requests, they are serviced in the order 4, 5, and</div><div class="t m0 x9 hf y1d98 ff3 fs5 fc0 sc0 ls0 ws0">then 0.</div><div class="t m0 x9 hf y1d99 ff3 fs5 fc0 sc0 ls0 ws0">The round-robin arbitration mode generally provides a more fair allocation of the</div><div class="t m0 x9 hf y1d9a ff3 fs5 fc0 sc0 ls0 ws0">available slave-port bandwidth (compared to fixed priority) as the fixed master priority</div><div class="t m0 x9 hf y1d9b ff3 fs5 fc0 sc0 ls0 ws0">does not affect the master selection.</div><div class="t m0 x9 hd y1d9c ff1 fs7 fc0 sc0 ls0 ws0">20.4<span class="_ _b"> </span>Initialization/application information</div><div class="t m0 x9 hf y1d9d ff3 fs5 fc0 sc0 ls0 ws0">No initialization is required for the crossbar switch. See the AXBS section of the</div><div class="t m0 x9 hf y1d9e ff3 fs5 fc0 sc0 ls0 ws0">configuration chapter for the reset state of the arbitration scheme.</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Initialization/application information</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">334<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
