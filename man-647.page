<div id="pf287" class="pf w0 h0" data-page-no="287"><div class="pc pc287 w0 h0"><img class="bi x0 y8 w2 h5" alt="" src="bg287.png"/><div class="t m0 xf6 hf yf6 ff3 fs5 fc0 sc0 ls0 ws0">1.<span class="_ _11"> </span>Complete all steps to discover a connected device and to configure a connected</div><div class="t m0 x117 hf yf7 ff3 fs5 fc0 sc0 ls0 ws0">device. Write the ADDR register with the address of the target device. Typically,</div><div class="t m0 x117 hf yf8 ff3 fs5 fc0 sc0 ls0 ws0">there is only one other device on the USB bus in host mode so it is expected that the</div><div class="t m0 x117 hf yf9 ff3 fs5 fc0 sc0 ls0 ws0">address is 0x01 and should remain constant.</div><div class="t m0 xf6 hf y629 ff3 fs5 fc0 sc0 ls0 ws0">2.<span class="_ _11"> </span>Write 0x1D to ENDPT0 register to enable transmit and receive transfers with</div><div class="t m0 x117 hf y62a ff3 fs5 fc0 sc0 ls0 ws0">handshaking enabled.</div><div class="t m0 xf6 hf y674 ff3 fs5 fc0 sc0 ls0 ws0">3.<span class="_ _11"> </span>Setup the even TX EP0 BDT to transfer up to 64 bytes.</div><div class="t m0 xf6 hf y23f0 ff3 fs5 fc0 sc0 ls0 ws0">4.<span class="_ _11"> </span>Set the USB device address of the target device in the address register (ADDR[6:0]).</div><div class="t m0 xf6 hf y23f1 ff3 fs5 fc0 sc0 ls0 ws0">5.<span class="_ _11"> </span>Write the TOKEN register with an OUT token to the desired endpoint. The write to</div><div class="t m0 x117 hf y1dd9 ff3 fs5 fc0 sc0 ls0 ws0">this register triggers the USB-FS transmit state machines to begin transmitting the</div><div class="t m0 x117 hf y1dda ff3 fs5 fc0 sc0 ls0 ws0">TOKEN and the data.</div><div class="t m0 xf6 hf y3907 ff3 fs5 fc0 sc0 ls0 ws0">6.<span class="_ _11"> </span>Setup the odd TX EP0 BDT to transfer up to 64 bytes.</div><div class="t m0 xf6 hf y392e ff3 fs5 fc0 sc0 ls0 ws0">7.<span class="_ _11"> </span>Write the TOKEN register with an OUT token as in step 4. Two tokens can be</div><div class="t m0 x117 hf y392f ff3 fs5 fc0 sc0 ls0 ws0">queued at a time to allow the packets to be double buffered to achieve maximum</div><div class="t m0 x117 hf y3930 ff3 fs5 fc0 sc0 ls0">throughput.</div><div class="t m0 xf6 hf y3931 ff3 fs5 fc0 sc0 ls0 ws0">8.<span class="_ _11"> </span>Wait for the TOKDNE interrupt. This indicates that one of the BDTs has been</div><div class="t m0 x117 hf y3932 ff3 fs5 fc0 sc0 ls0 ws0">released back to the processor and the transfer has completed. If the target device</div><div class="t m0 x117 hf y2bba ff3 fs5 fc0 sc0 ls0 ws0">asserts NAKs, the USB-FS continues to retry the transfer indefinitely without</div><div class="t m0 x117 hf y3933 ff3 fs5 fc0 sc0 ls0 ws0">processor intervention unless the ENDPT0[RETRYDIS] is 1. If the retry disable field</div><div class="t m0 x117 hf y3934 ff3 fs5 fc0 sc0 ls0 ws0">is set, the handshake (ACK, NAK, STALL, or ERROR (0xf)) is returned in the BDT</div><div class="t m0 x117 hf y3935 ff3 fs5 fc0 sc0 ls0 ws0">PID field. If a stall interrupt occurs, the pending packet must be dequeued and the</div><div class="t m0 x117 hf y3936 ff3 fs5 fc0 sc0 ls0 ws0">error condition in the target device cleared. If a Reset interrupt occurs (SE0 for more</div><div class="t m0 x117 h38 y3937 ff3 fs5 fc0 sc0 ls0 ws0">than 2.5 <span class="ff2 ws1e5">Î¼</span>s), the target has detached.</div><div class="t m0 xf6 hf y3938 ff3 fs5 fc0 sc0 ls0 ws0">9.<span class="_ _11"> </span>After the TOK_DNE interrupt occurs, the BDTs can be examined and the next data</div><div class="t m0 x117 hf y3939 ff3 fs5 fc0 sc0 ls0 ws0">packet queued by returning to step 2.</div><div class="t m0 x9 hd y393a ff1 fs7 fc0 sc0 ls0 ws0">35.7<span class="_ _b"> </span>On-The-Go operation</div><div class="t m0 x9 hf y24c4 ff3 fs5 fc0 sc0 ls0 ws0">The USB-OTG core provides sensors and controls to enable On-The-Go (OTG)</div><div class="t m0 x9 hf y24c5 ff3 fs5 fc0 sc0 ls0 ws0">operation. These sensors are used by the OTG API software to implement the Host</div><div class="t m0 x9 hf y24c6 ff3 fs5 fc0 sc0 ls0 ws0">Negotiation Protocol (HNP) and Session Request Protocol (SRP). API calls are provided</div><div class="t m0 x9 hf y393b ff3 fs5 fc0 sc0 ls0 ws0">to give access the OTG protocol control signals, and include the OTG capabilities in the</div><div class="t m0 x9 hf y393c ff3 fs5 fc0 sc0 ls0 ws0">device application. The following state machines show the OTG operations involved with</div><div class="t m0 x9 hf y393d ff3 fs5 fc0 sc0 ls0 ws0">HNP and SRP protocols from either end of the USB cable.</div><div class="t m0 xea h10 y141 ff1 fs4 fc0 sc0 ls0 ws0">Chapter 35 Universal Serial Bus OTG Controller (USBOTG)</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">Freescale Semiconductor, Inc.<span class="_ _113"> </span>647</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
