<div id="pf290" class="pf w0 h0" data-page-no="290"><div class="pc pc290 w0 h0"><img class="bi x0 y8 w2 h5" alt="" src="bg290.png"/><div class="t m0 x33 hf yf6 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Programmable transmit bit rate</div><div class="t m0 x33 hf y503 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Double-buffered transmit and receive data register</div><div class="t m0 x33 hf y6d9 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Serial clock phase and polarity options</div><div class="t m0 x33 hf y6da ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Slave select output</div><div class="t m0 x33 hf y207c ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Mode fault error flag with CPU interrupt capability</div><div class="t m0 x33 hf y207d ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Control of SPI operation during wait mode</div><div class="t m0 x33 hf y207e ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Selectable MSB-first or LSB-first shifting</div><div class="t m0 x33 hf y207f ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Receive data buffer hardware match feature</div><div class="t m0 x33 hf y2080 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Support transmission of both Transmit and Receive by DMA</div><div class="t m0 x9 he y39c8 ff1 fs1 fc0 sc0 ls0 ws0">37.1.2<span class="_ _b"> </span>Modes of Operation</div><div class="t m0 x9 hf y2f43 ff3 fs5 fc0 sc0 ls0 ws0">The SPI functions in three modes, run, wait, and stop.</div><div class="t m0 x33 hf y2f44 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Run Mode</div><div class="t m0 x117 hf y39c9 ff3 fs5 fc0 sc0 ls0 ws0">This is the basic mode of operation.</div><div class="t m0 x33 hf y39ca ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Wait Mode</div><div class="t m0 x117 hf y39cb ff3 fs5 fc0 sc0 ls0 ws0">SPI operation in wait mode is a configurable low power mode, controlled by the</div><div class="t m0 x117 hf y39cc ff3 fs5 fc0 sc0 ls0 ws0">SPISWAI bit located in the SPIx_C2 register. In wait mode, if the SPISWAI bit is</div><div class="t m0 x117 hf y39cd ff3 fs5 fc0 sc0 ls0 ws0">clear, the SPI operates like in Run Mode. If the SPISWAI bit is set, the SPI goes into</div><div class="t m0 x117 hf y39ce ff3 fs5 fc0 sc0 ls0 ws0">a power conservative state, with the SPI clock generation turned off. If the SPI is</div><div class="t m0 x117 hf y39cf ff3 fs5 fc0 sc0 ls0 ws0">configured as a master, any transmission in progress stops, but is resumed after CPU</div><div class="t m0 x117 hf y39d0 ff3 fs5 fc0 sc0 ls0 ws0">enters run mode. If the SPI is configured as a slave, reception and transmission of a</div><div class="t m0 x117 hf y39d1 ff3 fs5 fc0 sc0 ls0 ws0">byte continues, so that the slave stays synchronized to the master.</div><div class="t m0 x33 hf y39d2 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Stop Mode</div><div class="t m0 x117 hf y39d3 ff3 fs5 fc0 sc0 ls0 ws0">To reduce power consumption, the SPI is inactive in stop modes where the peripheral</div><div class="t m0 x117 hf y39d4 ff3 fs5 fc0 sc0 ls0 ws0">bus clock is stopped but internal logic states are retained. If the SPI is configured as a</div><div class="t m0 x117 hf y39d5 ff3 fs5 fc0 sc0 ls0 ws0">master, any transmission in progress stops, but is resumed after the CPU enters run</div><div class="t m0 x117 hf y39d6 ff3 fs5 fc0 sc0 ls0 ws0">mode. If the SPI is configured as a slave, reception and transmission of a data</div><div class="t m0 x117 hf y39d7 ff3 fs5 fc0 sc0 ls0 ws0">continues, so that the slave stays synchronized to the master.</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0">Introduction</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">656<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
