<div id="pf2a1" class="pf w0 h0" data-page-no="2a1"><div class="pc pc2a1 w0 h0"><img class="bi x0 y8 w2 h5" alt="" src="bg2a1.png"/><div class="c x1d y3b4c w70 h1ad"><div class="t m0 xa6 h26 y3b4d ff2 fsf fc0 sc0 ls0 ws0">Configure SPI before T<span class="_ _124"></span>ransmission </div><div class="t m0 x52 h26 y3b4e ff2 fsf fc0 sc0 ls0">RESET</div><div class="t m0 x16b h26 y3b4f ff2 fsf fc0 sc0 ls0 ws0">Configure DMA Controller</div><div class="t m0 x149 h26 y3b50 ff2 fsf fc0 sc0 ls0 ws0">for SPI transmission</div><div class="t m0 xcd h26 y3b51 ff2 fsf fc0 sc0 ls0 ws0">Set SPE=1 to start transmission in</div><div class="t m0 xa7 h26 y3b52 ff2 fsf fc0 sc0 ls0 ws0">master mode or enable SPI for</div><div class="t m0 xb5 h26 y3b53 ff2 fsf fc0 sc0 ls0 ws0">transmission in slave mode</div><div class="t m0 x85 h26 y3b54 ff2 fsf fc0 sc0 ls0 ws0">Wait for interrupt(s) of DMA Controller</div><div class="t m0 xbf h26 y3b55 ff2 fsf fc0 sc0 ls0 ws0">indicating end of SPI transmission</div><div class="t m0 x38 h26 y3b56 ff2 fsf fc0 sc0 ls0 ws0">Read SPI status register</div><div class="t m0 x85 h26 y3b57 ff2 fsf fc0 sc0 ls0 ws0">Write the first byte to SPI data register</div><div class="t m0 x33 h26 y3b58 ff2 fsf fc0 sc0 ls0 ws0">via CPU</div><div class="t m0 x9d h26 y3b59 ff2 fsf fc0 sc0 ls0 ws0">Set TXDMAE to enable Transmit by</div><div class="t m0 x91 h26 y3b5a ff2 fsf fc0 sc0 ls0">DMA</div></div><div class="t m0 xa1 h9 y3b5b ff1 fs2 fc0 sc0 ls0 ws0">Figure 37-22. Recommended startup of SPI transmit by DMA</div><div class="t m0 x9 h1b y3b5c ff1 fsc fc0 sc0 ls0 ws0">37.4.4.2<span class="_ _b"> </span>Receive by DMA</div><div class="t m0 x9 hf y3b5d ff3 fs5 fc0 sc0 ls0 ws0">Receive by DMA is supported only when RXDMAE is set. A receive DMA request is</div><div class="t m0 x9 hf y3b5e ff3 fs5 fc0 sc0 ls0 ws0">asserted when both SPE and SPRF are set. Then the on-chip DMA controller detects this</div><div class="t m0 x9 hf y3b5f ff3 fs5 fc0 sc0 ls0 ws0">request and transfers data from the SPI data register into memory. After that, RX DMA</div><div class="t m0 x9 hf y3b60 ff3 fs5 fc0 sc0 ls0 ws0">DONE is asserted to clear SPRF automatically. This process repeats until all data to be</div><div class="t m0 x9 hf y3b61 ff3 fs5 fc0 sc0 ls0 ws0">received (the number is decided by configuration register[s] of the DMA controller) is</div><div class="t m0 x9 hf y3b62 ff3 fs5 fc0 sc0 ls0 ws0">received or no receive DMA request is generated again because the SPI transmission is</div><div class="t m0 x9 hf y3b63 ff3 fs5 fc0 sc0 ls0">finished.</div><div class="t m0 x9 he y3b64 ff1 fs1 fc0 sc0 ls0 ws0">37.4.5<span class="_ _b"> </span>SPI Clock Formats</div><div class="t m0 x9 hf y3b65 ff3 fs5 fc0 sc0 ls0 ws0">To accommodate a wide variety of synchronous serial peripherals from different</div><div class="t m0 x9 hf y3b66 ff3 fs5 fc0 sc0 ls0 ws0">manufacturers, the SPI system has a clock polarity (CPOL) bit and a clock phase (CPHA)</div><div class="t m0 x9 hf y3b67 ff3 fs5 fc0 sc0 ls0 ws0">control bit to select one of four clock formats for data transfers. CPOL selectively inserts</div><div class="t m0 x9 hf y3b68 ff3 fs5 fc0 sc0 ls0 ws0">an inverter in series with the clock. CPHA chooses between two different clock phase</div><div class="t m0 x9 hf y3b69 ff3 fs5 fc0 sc0 ls0 ws0">relationships between the clock and data.</div><div class="t m0 xec h10 y141 ff1 fs4 fc0 sc0 ls0 ws0">Chapter 37 Serial Peripheral Interface (SPI)</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">Freescale Semiconductor, Inc.<span class="_ _113"> </span>673</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
