<div id="pf44" class="pf w0 h0" data-page-no="44"><div class="pc pc44 w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg44.png"/><div class="t m0 x83 h9 y1a5 ff1 fs2 fc0 sc0 ls0 ws0">Table 3-22.<span class="_ _1a"> </span>Reference links to related information (continued)</div><div class="t m0 x37 h10 y1a6 ff1 fs4 fc0 sc0 ls0 ws0">Topic<span class="_ _69"> </span>Related module<span class="_ _6a"> </span>Reference</div><div class="t m0 x88 h7 y1a7 ff2 fs4 fc0 sc0 ls0 ws0">Programming model<span class="_ _bb"> </span>System Integration</div><div class="t m0 x47 h7 y1a8 ff2 fs4 fc0 sc0 ls0 ws0">Module (SIM)</div><div class="t m0 x7d h7 y1a7 ff2 fs4 fc1 sc0 ls0">SIM</div><div class="t m0 x9 h1b y4c9 ff1 fsc fc0 sc0 ls0 ws0">3.4.10.1<span class="_ _b"> </span>COP clocks</div><div class="t m0 x9 hf y405 ff3 fs5 fc0 sc0 ls0 ws0">The two clock inputs for the COP are the 1 kHz clock and the bus clock.</div><div class="t m0 x9 h1b y4ca ff1 fsc fc0 sc0 ls0 ws0">3.4.10.2<span class="_ _b"> </span>COP watchdog operation</div><div class="t m0 x9 hf y4cb ff3 fs5 fc0 sc0 ls0 ws0">The COP watchdog is intended to force a system reset when the application software fails</div><div class="t m0 x9 hf y4cc ff3 fs5 fc0 sc0 ls0 ws0">to execute as expected. To prevent a system reset from the COP timer (when it is</div><div class="t m0 x9 hf y4cd ff3 fs5 fc0 sc0 ls0 ws0">enabled), application software must reset the COP counter periodically. If the application</div><div class="t m0 x9 hf y4ce ff3 fs5 fc0 sc0 ls0 ws0">program gets lost and fails to reset the COP counter before it times out, a system reset is</div><div class="t m0 x9 hf y4cf ff3 fs5 fc0 sc0 ls0 ws0">generated to force the system back to a known starting point.</div><div class="t m0 x9 hf y4d0 ff3 fs5 fc0 sc0 ls0 ws0">After any reset, the COP watchdog is enabled. If the COP watchdog is not used in an</div><div class="t m0 x9 hf y4d1 ff3 fs5 fc0 sc0 ls0 ws0">application, it can be disabled by clearing COPCTRL[COPT] in the SIM.</div><div class="t m0 x9 hf y4d2 ff3 fs5 fc0 sc0 ls0 ws0">The COP counter is reset by writing 0x55 and 0xAA (in that order) to the address of the</div><div class="t m0 x9 hf y4d3 ff3 fs5 fc0 sc0 ls0 ws0">SIM&apos;s Service COP (SRVCOP) register during the selected timeout period. Writes do not</div><div class="t m0 x9 hf y4d4 ff3 fs5 fc0 sc0 ls0 ws0">affect the data in the SRVCOP register. As soon as the write sequence is complete, the</div><div class="t m0 x9 hf y4d5 ff3 fs5 fc0 sc0 ls0 ws0">COP timeout period is restarted. If the program fails to perform this restart during the</div><div class="t m0 x9 hf y4d6 ff3 fs5 fc0 sc0 ls0 ws0">timeout period, the microcontroller resets. Also, if any value other than 0x55 or 0xAA is</div><div class="t m0 x9 hf y4d7 ff3 fs5 fc0 sc0 ls0 ws0">written to the SRVCOP register, the microcontroller immediately resets.</div><div class="t m0 x9 hf y4d8 ff3 fs5 fc0 sc0 ls0 ws0">The SIM&apos;s COPCTRL[COPCLKS] field selects the clock source used for the COP timer.</div><div class="t m0 x9 hf y4d9 ff3 fs5 fc0 sc0 ls0 ws0">The clock source options are either the bus clock or an internal 1 kHz clock source. With</div><div class="t m0 x9 hf y4da ff3 fs5 fc0 sc0 ls0 ws0">each clock source, there are three associated timeouts controlled by COPCTRL[COPT].</div><div class="t m0 x9 hf y4db ff3 fs5 fc0 sc0 ls0 ws0">The following table summarizes the control functions of the COPCLKS and COPT bits.</div><div class="t m0 x9 hf y4dc ff3 fs5 fc0 sc0 ls0 ws0">The COP watchdog defaults to operation from the 1 kHz clock source and the longest</div><div class="t m0 x9 h2a y4dd ff3 fs5 fc0 sc0 ls0 ws0">timeout for that clock source (2<span class="fs8 ws198 v3">10</span> cycles).</div><div class="t m0 x2f h9 y4de ff1 fs2 fc0 sc0 ls0 ws0">Table 3-23.<span class="_ _1a"> </span>COP configuration options</div><div class="t m0 xa1 h10 y4df ff1 fs4 fc0 sc0 ls0 ws0">Control Bits<span class="_ _d8"> </span>Clock Source<span class="_ _d9"> </span>COP Window Opens</div><div class="t m0 xc5 h10 y4e0 ff1 fs4 fc0 sc0 ls0">(COPCTRL[COPW]=1)</div><div class="t m0 xc6 h10 y4df ff1 fs4 fc0 sc0 ls0 ws0">COP Overflow Count</div><div class="t m0 xc7 h10 y4e1 ff1 fs4 fc0 sc0 ls0 ws1d0">COPCTRL[COPCLKS] COPCTRL[COPT]</div><div class="t m0 x41 h7 y4e2 ff2 fs4 fc0 sc0 ls0 ws0">N/A<span class="_ _da"> </span>00<span class="_ _e"> </span>N/A<span class="_ _73"> </span>N/A<span class="_ _db"> </span>COP is disabled</div><div class="t m0 x92 h17 y4e3 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _dc"> </span>01<span class="_ _7d"> </span>1 kHz<span class="_ _2a"> </span>N/A<span class="_ _79"> </span>2<span class="fs9 ws1a4 v4">5</span> cycles (32 ms)</div><div class="t m0 x1b h7 y4e4 ff5 fs4 fc0 sc0 ls0 ws0">Table continues on the next page...</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">System Modules</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">68<span class="_ _9"> </span>Freescale Semiconductor, Inc.</div><a class="l" href="#pfbf" data-dest-detail='[191,"XYZ",null,572.8,null]'><div class="d m1" style="border-style:none;position:absolute;left:398.799000px;bottom:675.600000px;width:16.002000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
