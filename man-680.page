<div id="pf2a8" class="pf w0 h0" data-page-no="2a8"><div class="pc pc2a8 w0 h0"><img class="bi x0 y8 w2 h5" alt="" src="bg2a8.png"/><div class="t m0 x9 h1b y502 ff1 fsc fc0 sc0 ls0 ws0">37.4.9.2<span class="_ _b"> </span>SPI in Wait Mode</div><div class="t m0 x9 hf y503 ff3 fs5 fc0 sc0 ls0 ws0">SPI operation in wait mode depends upon the state of the SPISWAI bit in SPI Control</div><div class="t m0 x9 hf y504 ff3 fs5 fc0 sc0 ls0 ws0">Register 2.</div><div class="t m0 x33 hf y79d ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>If SPISWAI is clear, the SPI operates normally when the CPU is in wait mode.</div><div class="t m0 x33 hf y6db ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>If SPISWAI is set, SPI clock generation ceases and the SPI module enters a power</div><div class="t m0 x34 hf y6dc ff3 fs5 fc0 sc0 ls0 ws0">conservation state when the CPU is in wait mode.</div><div class="t m0 x2 hf y79e ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>If SPISWAI is set and the SPI is configured for master, any transmission and</div><div class="t m0 x3d hf y79f ff3 fs5 fc0 sc0 ls0 ws0">reception in progress stops at wait mode entry. The transmission and reception</div><div class="t m0 x3d hf y7a0 ff3 fs5 fc0 sc0 ls0 ws0">resumes when the SPI exits wait mode.</div><div class="t m0 x2 hf y23c7 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>If SPISWAI is set and the SPI is configured as a slave, any transmission and</div><div class="t m0 x3d hf y2364 ff3 fs5 fc0 sc0 ls0 ws0">reception in progress continues if the SPSCK continues to be driven from the</div><div class="t m0 x3d hf y3c1f ff3 fs5 fc0 sc0 ls0 ws0">master. This keeps the slave synchronized to the master and the SPSCK.</div><div class="t m0 x3d hf y3c20 ff3 fs5 fc0 sc0 ls0 ws0">If the master transmits data while the slave is in wait mode, the slave continues</div><div class="t m0 x3d hf y3c21 ff3 fs5 fc0 sc0 ls0 ws0">to send data consistent with the operation mode at the start of wait mode (that is,</div><div class="t m0 x3d hf y3c22 ff3 fs5 fc0 sc0 ls0 ws0">if the slave is currently sending its SPIx_D to the master, it continues to send the</div><div class="t m0 x3d hf y3c23 ff3 fs5 fc0 sc0 ls0 ws0">same byte. Otherwise, if the slave is currently sending the last data received byte</div><div class="t m0 x3d hf y3c24 ff3 fs5 fc0 sc0 ls0 ws0">from the master, it continues to send each previously received data from the</div><div class="t m0 x3d hf y3c25 ff3 fs5 fc0 sc0 ls0 ws0">master byte).</div><div class="t m0 xda h8 y3c26 ff1 fs5 fc0 sc0 ls0">Note</div><div class="t m0 x3e hf y3c27 ff3 fs5 fc0 sc0 ls0 ws0">Care must be taken when expecting data from a master while</div><div class="t m0 x3e hf y178b ff3 fs5 fc0 sc0 ls0 ws0">the slave is in a wait mode or a stop mode where the peripheral</div><div class="t m0 x3e hf y178c ff3 fs5 fc0 sc0 ls0 ws0">bus clock is stopped but internal logic states are retained. Even</div><div class="t m0 x3e hf y19cf ff3 fs5 fc0 sc0 ls0 ws0">though the shift register continues to operate, the rest of the SPI</div><div class="t m0 x3e hf yea ff3 fs5 fc0 sc0 ls0 ws0">is shut down (that is, an SPRF interrupt is not generated until an</div><div class="t m0 x3e hf yeb ff3 fs5 fc0 sc0 ls0 ws0">exit from stop or wait mode). Also, the data from the shift</div><div class="t m0 x3e hf yec ff3 fs5 fc0 sc0 ls0 ws0">register is not copied into the SPIx_D registers until after the</div><div class="t m0 x3e hf yed ff3 fs5 fc0 sc0 ls0 ws0">slave SPI has exited wait or stop mode. An SPRF flag and</div><div class="t m0 x3e hf yee ff3 fs5 fc0 sc0 ls0 ws0">SPIx_D copy is only generated if wait mode is entered or exited</div><div class="t m0 x3e hf y1867 ff3 fs5 fc0 sc0 ls0 ws0">during a transmission. If the slave enters wait mode in idle</div><div class="t m0 x3e hf yf0 ff3 fs5 fc0 sc0 ls0 ws0">mode and exits wait mode in idle mode, neither an SPRF nor a</div><div class="t m0 x3e hf yf1 ff3 fs5 fc0 sc0 ls0 ws0">SPIx_D copy occurs.</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Functional Description</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">680<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
