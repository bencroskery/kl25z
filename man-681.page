<div id="pf2a9" class="pf w0 h0" data-page-no="2a9"><div class="pc pc2a9 w0 h0"><img class="bi x0 y8 w2 h5" alt="" src="bg2a9.png"/><div class="t m0 x9 h1b y502 ff1 fsc fc0 sc0 ls0 ws0">37.4.9.3<span class="_ _b"> </span>SPI in Stop Mode</div><div class="t m0 x9 hf y2c42 ff3 fs5 fc0 sc0 ls0 ws0">Operation in a stop mode where the peripheral bus clock is stopped but internal logic</div><div class="t m0 x9 hf y2c43 ff3 fs5 fc0 sc0 ls0 ws0">states are retained depends on the SPI system. The stop mode does not depend on the</div><div class="t m0 x9 hf y2c44 ff3 fs5 fc0 sc0 ls0 ws0">SPISWAI bit. Upon entry to this type of stop mode, the SPI module clock is disabled</div><div class="t m0 x9 hf y2c45 ff3 fs5 fc0 sc0 ls0 ws0">(held high or low).</div><div class="t m0 x33 hf y2c46 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>If the SPI is in master mode and exchanging data when the CPU enters the stop</div><div class="t m0 x34 hf y2c47 ff3 fs5 fc0 sc0 ls0 ws0">mode, the transmission is frozen until the CPU exits stop mode. After the exit from</div><div class="t m0 x34 hf y2c48 ff3 fs5 fc0 sc0 ls0 ws0">stop mode, data to and from the external SPI is exchanged correctly.</div><div class="t m0 x33 hf y291 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>In slave mode, the SPI remains synchronized with the master.</div><div class="t m0 x9 hf ycae ff3 fs5 fc0 sc0 ls0 ws0">The SPI is completely disabled in a stop mode where the peripheral bus clock is stopped</div><div class="t m0 x9 hf y2c4a ff3 fs5 fc0 sc0 ls0 ws0">and internal logic states are not retained. After an exit from this type of stop mode, all</div><div class="t m0 x9 hf y2c4b ff3 fs5 fc0 sc0 ls0 ws0">registers are reset to their default values, and the SPI module must be re-initialized.</div><div class="t m0 x9 he y3c28 ff1 fs1 fc0 sc0 ls0 ws18f">37.4.10 Reset</div><div class="t m0 x9 hf y26b6 ff3 fs5 fc0 sc0 ls0 ws0">The reset values of registers and signals are described in the Memory Map and Register</div><div class="t m0 x9 hf y3b8b ff3 fs5 fc0 sc0 ls0 ws0">Descriptions content, which details the registers and their bitfields.</div><div class="t m0 x33 hf y3c29 ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>If a data transmission occurs in slave mode after a reset without a write to SPIx_D,</div><div class="t m0 x117 hf y3c2a ff3 fs5 fc0 sc0 ls0 ws0">the transmission consists of &quot;garbage&quot; or the data last received from the master</div><div class="t m0 x117 hf y3c2b ff3 fs5 fc0 sc0 ls0 ws0">before the reset.</div><div class="t m0 x33 hf y3c2c ff3 fs5 fc0 sc0 ls0 ws0">•<span class="_ _11"> </span>Reading from SPIx_D after reset always returns zeros.</div><div class="t m0 x9 he y3c2d ff1 fs1 fc0 sc0 ls0 ws18f">37.4.11 Interrupts</div><div class="t m0 x9 hf y3c2e ff3 fs5 fc0 sc0 ls0 ws0">The SPI originates interrupt requests only when the SPI is enabled (the SPE bit in the</div><div class="t m0 x9 hf yf24 ff3 fs5 fc0 sc0 ls0 ws0">SPIx_C1 register is set). The following is a description of how the SPI makes a request</div><div class="t m0 x9 hf y3c2f ff3 fs5 fc0 sc0 ls0 ws0">and how the MCU should acknowledge that request. The interrupt vector offset and</div><div class="t m0 x9 hf y3c30 ff3 fs5 fc0 sc0 ls0 ws0">interrupt priority are chip dependent.</div><div class="t m0 x9 hf y14a ff3 fs5 fc0 sc0 ls0 ws0">Four flag bits, three interrupt mask bits, and one interrupt vector are associated with the</div><div class="t m0 x9 hf y14b ff3 fs5 fc0 sc0 ls0 ws0">SPI system. The SPI interrupt enable mask (SPIE) enables interrupts from the SPI</div><div class="t m0 x9 hf y3c31 ff3 fs5 fc0 sc0 ls0 ws0">receiver full flag (SPRF) and mode fault flag (MODF). The SPI transmit interrupt enable</div><div class="t m0 x9 hf y1e52 ff3 fs5 fc0 sc0 ls0 ws0">mask (SPTIE) enables interrupts from the SPI transmit buffer empty flag (SPTEF). The</div><div class="t m0 x9 hf y3c32 ff3 fs5 fc0 sc0 ls0 ws0">SPI match interrupt enable mask bit (SPIMIE) enables interrupts from the SPI match flag</div><div class="t m0 x9 hf y3c33 ff3 fs5 fc0 sc0 ls0 ws0">(SPMF). When one of the flag bits is set, and the associated interrupt mask bit is set, a</div><div class="t m0 x9 hf y3c34 ff3 fs5 fc0 sc0 ls0 ws0">hardware interrupt request is sent to the CPU. If the interrupt mask bits are cleared,</div><div class="t m0 x9 hf y3c35 ff3 fs5 fc0 sc0 ls0 ws0">software can poll the associated flag bits instead of using interrupts. The SPI interrupt</div><div class="t m0 xec h10 y141 ff1 fs4 fc0 sc0 ls0 ws0">Chapter 37 Serial Peripheral Interface (SPI)</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">Freescale Semiconductor, Inc.<span class="_ _113"> </span>681</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
