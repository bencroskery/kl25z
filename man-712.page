<div id="pf2c8" class="pf w0 h0" data-page-no="2c8"><div class="pc pc2c8 w0 h0"><img class="bi x0 y8 w2 h5" alt="" src="bg2c8.png"/><div class="t m0 x9 hf yf6 ff3 fs5 fc0 sc0 ls0 ws0">receiving the eighth SCL (8th bit) if this byte is a data byte. So software can determine</div><div class="t m0 x9 hf yf7 ff3 fs5 fc0 sc0 ls0 ws0">whether an ACK or NACK should be sent to the bus by setting or clearing the TXAK bit</div><div class="t m0 x9 hf yf8 ff3 fs5 fc0 sc0 ls0 ws0">if the FACK (fast ACK/NACK enable) bit is enabled.</div><div class="t m0 x9 hf y505 ff3 fs5 fc0 sc0 ls0 ws0">SMBus requires a device always to acknowledge its own address, as a mechanism to</div><div class="t m0 x9 hf y629 ff3 fs5 fc0 sc0 ls0 ws0">detect the presence of a removable device (such as a battery or docking station) on the</div><div class="t m0 x9 hf y62a ff3 fs5 fc0 sc0 ls0 ws0">bus. In addition to indicating a slave device busy condition, SMBus uses the NACK</div><div class="t m0 x9 hf yabd ff3 fs5 fc0 sc0 ls0 ws0">mechanism to indicate the reception of an invalid command or invalid data. Because such</div><div class="t m0 x9 hf y644 ff3 fs5 fc0 sc0 ls0 ws0">a condition may occur on the last byte of the transfer, SMBus devices are required to</div><div class="t m0 x9 hf y645 ff3 fs5 fc0 sc0 ls0 ws0">have the ability to generate the not acknowledge after the transfer of each byte and before</div><div class="t m0 x9 hf y646 ff3 fs5 fc0 sc0 ls0 ws0">the completion of the transaction. This requirement is important because SMBus does not</div><div class="t m0 x9 hf yaee ff3 fs5 fc0 sc0 ls0 ws0">provide any other resend signaling. This difference in the use of the NACK signaling has</div><div class="t m0 x9 hf yaef ff3 fs5 fc0 sc0 ls0 ws0">implications on the specific implementation of the SMBus port, especially in devices that</div><div class="t m0 x9 hf yaf0 ff3 fs5 fc0 sc0 ls0 ws0">handle critical system data such as the SMBus host and the SBS components.</div><div class="t m0 x10e h8 y3e9f ff1 fs5 fc0 sc0 ls0">NOTE</div><div class="t m0 x3e hf y3ea0 ff3 fs5 fc0 sc0 ls0 ws0">In the last byte of master receive slave transmit mode, the</div><div class="t m0 x3e hf y3ea1 ff3 fs5 fc0 sc0 ls0 ws0">master must send a NACK to the bus, so FACK must be</div><div class="t m0 x3e hf y3ea2 ff3 fs5 fc0 sc0 ls0 ws0">switched off before the last byte transmits.</div><div class="t m0 x9 he y3ea3 ff1 fs1 fc0 sc0 ls0 ws4bf">38.4.5 Resets</div><div class="t m0 x9 hf yac5 ff3 fs5 fc0 sc0 ls0 ws0">The I2C module is disabled after a reset. The I2C module cannot cause a core reset.</div><div class="t m0 x9 he y3ea4 ff1 fs1 fc0 sc0 ls0 ws18f">38.4.6 Interrupts</div><div class="t m0 x9 hf y2f4b ff3 fs5 fc0 sc0 ls0 ws0">The I2C module generates an interrupt when any of the events in the following table</div><div class="t m0 x9 hf y279d ff3 fs5 fc0 sc0 ls0 ws0">occur, provided that the IICIE bit is set. The interrupt is driven by the IICIF bit (of the</div><div class="t m0 x9 hf y662 ff3 fs5 fc0 sc0 ls0 ws0">I2C Status Register) and masked with the IICIE bit (of the I2C Control Register 1). The</div><div class="t m0 x9 hf y663 ff3 fs5 fc0 sc0 ls0 ws0">IICIF bit must be cleared (by software) by writing 1 to it in the interrupt routine. The</div><div class="t m0 x9 hf y1a17 ff3 fs5 fc0 sc0 ls0 ws0">SMBus timeouts interrupt is driven by SLTF and masked with the IICIE bit. The SLTF</div><div class="t m0 x9 hf y3ea5 ff3 fs5 fc0 sc0 ls0 ws0">bit must be cleared by software by writing 1 to it in the interrupt routine. You can</div><div class="t m0 x9 hf y3ea6 ff3 fs5 fc0 sc0 ls0 ws0">determine the interrupt type by reading the Status Register.</div><div class="t m0 x10e h8 y3ea7 ff1 fs5 fc0 sc0 ls0">NOTE</div><div class="t m0 x3e hf y3ea8 ff3 fs5 fc0 sc0 ls0 ws0">In master receive mode, the FACK bit must be set to zero</div><div class="t m0 x3e hf y3ea9 ff3 fs5 fc0 sc0 ls0 ws0">before the last byte transfer.</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Functional description</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">712<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
