<div id="pf2e4" class="pf w0 h0" data-page-no="2e4"><div class="pc pc2e4 w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg2e4.png"/><div class="t m0 x9 hf yf6 ff3 fs5 fc0 sc0 ls0 ws0">the transmit shifter, then write 0 and then write 1 to the UART_C2[TE] bit. This action</div><div class="t m0 x9 hf yf7 ff3 fs5 fc0 sc0 ls0 ws0">queues an idle character to be sent as soon as the shifter is available. As long as the</div><div class="t m0 x9 hf yf8 ff3 fs5 fc0 sc0 ls0 ws0">character in the shifter does not finish whileUART_C2[TE] is cleared, the UART</div><div class="t m0 x9 hf yf9 ff3 fs5 fc0 sc0 ls0 ws0">transmitter never actually releases control of the UART_TX pin.</div><div class="t m0 x9 hf y629 ff3 fs5 fc0 sc0 ls0 ws0">The length of the break character is affected by the UART_S2[BRK13], UART_C1[M]</div><div class="t m0 x9 hf y62a ff3 fs5 fc0 sc0 ls0 ws0">and UART_C4[M10] bits as shown below.</div><div class="t m0 x4a h9 y2767 ff1 fs2 fc0 sc0 ls0 ws0">Table 39-27.<span class="_ _1a"> </span>Break character length</div><div class="t m0 x2 h10 yc27 ff1 fs4 fc0 sc0 ls0 ws0">BRK13<span class="_ _1a1"> </span>M<span class="_ _f"> </span>M10<span class="_ _1b3"> </span>SBNS<span class="_ _14a"> </span>Break character</div><div class="t m0 x56 h10 yc28 ff1 fs4 fc0 sc0 ls0">length</div><div class="t m0 x3d h7 y2dd8 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _211"> </span>0<span class="_ _211"> </span>0<span class="_ _211"> </span>0<span class="_ _6e"> </span>10 bit times</div><div class="t m0 x3d h7 y4190 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _211"> </span>0<span class="_ _211"> </span>0<span class="_ _211"> </span>1<span class="_ _6e"> </span>11 bit times</div><div class="t m0 x3d h7 y4191 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _211"> </span>1<span class="_ _211"> </span>0<span class="_ _211"> </span>0<span class="_ _6e"> </span>11 bit times</div><div class="t m0 x3d h7 y4192 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _211"> </span>1<span class="_ _211"> </span>0<span class="_ _211"> </span>1<span class="_ _6e"> </span>12 bit times</div><div class="t m0 x3d h7 y4193 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _7c"> </span>X<span class="_ _83"> </span>1<span class="_ _211"> </span>0<span class="_ _6e"> </span>12 bit times</div><div class="t m0 x3d h7 y4194 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _7c"> </span>X<span class="_ _83"> </span>1<span class="_ _211"> </span>1<span class="_ _6e"> </span>13 bit times</div><div class="t m0 x3d h7 y4195 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _211"> </span>0<span class="_ _211"> </span>0<span class="_ _211"> </span>0<span class="_ _6e"> </span>13 bit times</div><div class="t m0 x3d h7 y4196 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _211"> </span>0<span class="_ _211"> </span>0<span class="_ _211"> </span>1<span class="_ _6e"> </span>14 bit times</div><div class="t m0 x3d h7 y1a3b ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _211"> </span>1<span class="_ _211"> </span>0<span class="_ _211"> </span>0<span class="_ _6e"> </span>14 bit times</div><div class="t m0 x3d h7 y4197 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _211"> </span>1<span class="_ _211"> </span>0<span class="_ _211"> </span>1<span class="_ _6e"> </span>15 bit times</div><div class="t m0 x3d h7 y4198 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _7c"> </span>X<span class="_ _83"> </span>1<span class="_ _211"> </span>0<span class="_ _6e"> </span>15 bit times</div><div class="t m0 x3d h7 y4199 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _7c"> </span>X<span class="_ _83"> </span>1<span class="_ _211"> </span>1<span class="_ _6e"> </span>16 bit times</div><div class="t m0 x9 he y1b17 ff1 fs1 fc0 sc0 ls0 ws0">39.3.3<span class="_ _b"> </span>Receiver functional description</div><div class="t m0 x9 hf y419a ff3 fs5 fc0 sc0 ls0 ws0">In this section, the receiver block diagram is a guide for the overall receiver functional</div><div class="t m0 x9 hf y39c4 ff3 fs5 fc0 sc0 ls0 ws0">description. Next, the data sampling technique used to reconstruct receiver data is</div><div class="t m0 x9 hf y419b ff3 fs5 fc0 sc0 ls0 ws0">described in more detail. Finally, two variations of the receiver wakeup function are</div><div class="t m0 x9 hf y419c ff3 fs5 fc0 sc0 ls0">explained.</div><div class="t m0 x9 hf ya81 ff3 fs5 fc0 sc0 ls0 ws0">The receiver input is inverted by setting UART_S2[RXINV]. The receiver is enabled by</div><div class="t m0 x9 hf ya82 ff3 fs5 fc0 sc0 ls0 ws0">setting the UART_C2[RE] bit. Character frames consist of a start bit of logic 0, eight to</div><div class="t m0 x9 hf ya83 ff3 fs5 fc0 sc0 ls0 ws0">ten data bits (msb or lsb first), and one or two stop bits of logic 1. For information about</div><div class="t m0 x9 hf ya84 ff3 fs5 fc0 sc0 ls0 ws0">9-bit or 10-bit data mode, refer to <span class="fc1">8-bit, 9-bit and 10-bit data modes</span>. For the remainder of</div><div class="t m0 x9 hf y14cb ff3 fs5 fc0 sc0 ls0 ws0">this discussion, assume the UART is configured for normal 8-bit data mode.</div><div class="t m0 x9 hf yabc ff3 fs5 fc0 sc0 ls0 ws0">After receiving the stop bit into the receive shifter, and provided the receive data register</div><div class="t m0 x9 hf y419d ff3 fs5 fc0 sc0 ls0 ws0">is not already full, the data character is transferred to the receive data register and the</div><div class="t m0 x9 hf y419e ff3 fs5 fc0 sc0 ls0 ws0">receive data register full (UART_S1[RDRF]) status flag is set. If UART_S1[RDRF] was</div><div class="t m0 x9 hf y419f ff3 fs5 fc0 sc0 ls0 ws0">already set indicating the receive data register (buffer) was already full, the overrun (OR)</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Functional description</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">740<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div><a class="l" href="#pf2e7" data-dest-detail='[743,"XYZ",null,78.1,null]'><div class="d m1" style="border-style:none;position:absolute;left:245.296000px;bottom:161.000000px;width:187.432000px;height:14.000000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
