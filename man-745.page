<div id="pf2e9" class="pf w0 h0" data-page-no="2e9"><div class="pc pc2e9 w0 h0"><img class="bi x0 y8 w2 h5" alt="" src="bg2e9.png"/><div class="t m0 x9 hf yf6 ff3 fs5 fc0 sc0 ls0 ws0">In single-wire mode, the UART_C3[TXDIR] bit controls the direction of serial data on</div><div class="t m0 x9 hf yf7 ff3 fs5 fc0 sc0 ls0 ws0">the UART_TX pin. When UART_C3[TXDIR] is cleared, the UART_TX pin is an input</div><div class="t m0 x9 hf yf8 ff3 fs5 fc0 sc0 ls0 ws0">to the UART receiver and the transmitter is temporarily disconnected from the</div><div class="t m0 x9 hf yf9 ff3 fs5 fc0 sc0 ls0 ws0">UART_TX pin so an external device can send serial data to the receiver. When</div><div class="t m0 x9 hf yfa ff3 fs5 fc0 sc0 ls0 ws0">UART_C3[TXDIR] is set, the UART_TXD pin is an output driven by the transmitter, the</div><div class="t m0 x9 hf yfb ff3 fs5 fc0 sc0 ls0 ws0">internal loop back connection is disabled, and as a result the receiver cannot receive</div><div class="t m0 x9 hf yfc ff3 fs5 fc0 sc0 ls0 ws0">characters that are sent out by the transmitter.</div><div class="t m0 x9 he y41e4 ff1 fs1 fc0 sc0 ls0 ws0">39.3.5<span class="_ _b"> </span>Interrupts and status flags</div><div class="t m0 x9 hf y28f6 ff3 fs5 fc0 sc0 ls0 ws0">The UART system generates three separate interrupts to reduce the amount of software</div><div class="t m0 x9 hf y2701 ff3 fs5 fc0 sc0 ls0 ws0">needed to isolate the cause of the interrupt. One interrupt is associated with the</div><div class="t m0 x9 hf y2702 ff3 fs5 fc0 sc0 ls0 ws0">transmitter for TDRE and TC events. Another interrupt is associated with the receiver for</div><div class="t m0 x9 hf y2703 ff3 fs5 fc0 sc0 ls0 ws0">RDRF, IDLE, RXEDGIF, and LBKDIF events. A third interrupt is used for OR, NF, FE,</div><div class="t m0 x9 hf y2704 ff3 fs5 fc0 sc0 ls0 ws0">and PF error conditions. Each of these ten interrupt sources can be separately masked by</div><div class="t m0 x9 hf y2c06 ff3 fs5 fc0 sc0 ls0 ws0">local interrupt enable masks. The flags can be polled by software when the local masks</div><div class="t m0 x9 hf y2c07 ff3 fs5 fc0 sc0 ls0 ws0">are cleared to disable generation of hardware interrupt requests.</div><div class="t m0 x9 hf y2707 ff3 fs5 fc0 sc0 ls0 ws0">The UART transmitter has two status flags that can optionally generate hardware</div><div class="t m0 x9 hf y2708 ff3 fs5 fc0 sc0 ls0 ws0">interrupt requests. Transmit data register empty (UART_S1[TDRE]) indicates when there</div><div class="t m0 x9 hf ya4f ff3 fs5 fc0 sc0 ls0 ws0">is room in the transmit data buffer to write another transmit character to UART_D. If the</div><div class="t m0 x9 hf y41e5 ff3 fs5 fc0 sc0 ls0 ws0">transmit interrupt enable (UART_C2[TIE]) bit is set, a hardware interrupt is requested</div><div class="t m0 x9 hf y41e6 ff3 fs5 fc0 sc0 ls0 ws0">when UART_S1[TDRE] is set. Transmit complete (UART_S1[TC]) indicates that the</div><div class="t m0 x9 hf y41e7 ff3 fs5 fc0 sc0 ls0 ws0">transmitter is finished transmitting all data, preamble, and break characters and is idle</div><div class="t m0 x9 hf y41e8 ff3 fs5 fc0 sc0 ls0 ws0">with UART_TX at the inactive level. This flag is often used in systems with modems to</div><div class="t m0 x9 hf y41e9 ff3 fs5 fc0 sc0 ls0 ws0">determine when it is safe to turn off the modem. If the transmit complete interrupt enable</div><div class="t m0 x9 hf y41ea ff3 fs5 fc0 sc0 ls0 ws0">(UART_C2[TCIE]) bit is set, a hardware interrupt is requested when UART_S1[TC] is</div><div class="t m0 x9 hf y41eb ff3 fs5 fc0 sc0 ls0 ws0">set. Instead of hardware interrupts, software polling may be used to monitor the</div><div class="t m0 x9 hf y235a ff3 fs5 fc0 sc0 ls0 ws0">UART_S1[TDRE] and UART_S1[TC] status flags if the corresponding UART_C2[TIE]</div><div class="t m0 x9 hf y41ec ff3 fs5 fc0 sc0 ls0 ws0">or UART_C2[TCIE] local interrupt masks are cleared.</div><div class="t m0 x9 hf y41ed ff3 fs5 fc0 sc0 ls0 ws0">When a program detects that the receive data register is full (UART_S1[RDRF] = 1), it</div><div class="t m0 x9 hf y41ee ff3 fs5 fc0 sc0 ls0 ws0">gets the data from the receive data register by reading UART_D. The UART_S1[RDRF]</div><div class="t m0 x9 hf y41ef ff3 fs5 fc0 sc0 ls0 ws0">flag is cleared by reading UART_D.</div><div class="t m0 x9 hf y41f0 ff3 fs5 fc0 sc0 ls0 ws0">The IDLE status flag includes logic that prevents it from getting set repeatedly when the</div><div class="t m0 x9 hf y41f1 ff3 fs5 fc0 sc0 ls0 ws0">UART_RX line remains idle for an extended period of time. IDLE is cleared by writing 1</div><div class="t m0 x9 hf y41f2 ff3 fs5 fc0 sc0 ls0 ws0">to the UART_S1[IDLE] flag. After UART_S1[IDLE] has been cleared, it cannot become</div><div class="t m0 x9 hf y41f3 ff3 fs5 fc0 sc0 ls0 ws0">set again until the receiver has received at least one new character and has set</div><div class="t m0 x9 hf y41f4 ff3 fs5 fc0 sc0 ls0">UART_S1[RDRF].</div><div class="t m0 x44 h10 y141 ff1 fs4 fc0 sc0 ls0 ws0">Chapter 39 Universal Asynchronous Receiver/Transmitter (UART0)</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">Freescale Semiconductor, Inc.<span class="_ _113"> </span>745</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
