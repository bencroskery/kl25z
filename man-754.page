<div id="pf2f2" class="pf w0 h0" data-page-no="2f2"><div class="pc pc2f2 w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg2f2.png"/><div class="t m0 x1d h9 y1a5 ff1 fs2 fc0 sc0 ls0 ws20b">UART<span class="ff7">x</span><span class="ws0">_C2 field descriptions</span></div><div class="t m0 x12c h10 y10f8 ff1 fs4 fc0 sc0 ls0 ws259">Field Description</div><div class="t m0 x97 h7 y10f9 ff2 fs4 fc0 sc0 ls0">7</div><div class="t m0 x8b h7 y935 ff2 fs4 fc0 sc0 ls0">TIE</div><div class="t m0 x83 h7 y10f9 ff2 fs4 fc0 sc0 ls0 ws0">Transmit Interrupt Enable for TDRE</div><div class="t m0 x83 h7 y1256 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>Hardware interrupts from TDRE disabled; use polling.</div><div class="t m0 x83 h7 y42ae ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>Hardware interrupt requested when TDRE flag is 1.</div><div class="t m0 x97 h7 y42af ff2 fs4 fc0 sc0 ls0">6</div><div class="t m0 x3a h7 y42b0 ff2 fs4 fc0 sc0 ls0">TCIE</div><div class="t m0 x83 h7 y42af ff2 fs4 fc0 sc0 ls0 ws0">Transmission Complete Interrupt Enable for TC</div><div class="t m0 x83 h7 y8ba ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>Hardware interrupts from TC disabled; use polling.</div><div class="t m0 x83 h7 y42b1 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>Hardware interrupt requested when TC flag is 1.</div><div class="t m0 x97 h7 y42b2 ff2 fs4 fc0 sc0 ls0">5</div><div class="t m0 x1 h7 y42b3 ff2 fs4 fc0 sc0 ls0">RIE</div><div class="t m0 x83 h7 y42b2 ff2 fs4 fc0 sc0 ls0 ws0">Receiver Interrupt Enable for RDRF</div><div class="t m0 x83 h7 y42b4 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>Hardware interrupts from RDRF disabled; use polling.</div><div class="t m0 x83 h7 y42b5 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>Hardware interrupt requested when RDRF flag is 1.</div><div class="t m0 x97 h7 y42b6 ff2 fs4 fc0 sc0 ls0">4</div><div class="t m0 x1 h7 y42b7 ff2 fs4 fc0 sc0 ls0">ILIE</div><div class="t m0 x83 h7 y42b6 ff2 fs4 fc0 sc0 ls0 ws0">Idle Line Interrupt Enable for IDLE</div><div class="t m0 x83 h7 y1f6d ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>Hardware interrupts from IDLE disabled; use polling.</div><div class="t m0 x83 h7 y42b8 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>Hardware interrupt requested when IDLE flag is 1.</div><div class="t m0 x97 h7 y42b9 ff2 fs4 fc0 sc0 ls0">3</div><div class="t m0 x8b h7 y42ba ff2 fs4 fc0 sc0 ls0">TE</div><div class="t m0 x83 h7 y42b9 ff2 fs4 fc0 sc0 ls0 ws0">Transmitter Enable</div><div class="t m0 x83 h7 y3445 ff2 fs4 fc0 sc0 ls0 ws0">TE must be 1 to use the UART transmitter. When TE is set, the UART forces the TxD pin to act as an</div><div class="t m0 x83 h7 y16a0 ff2 fs4 fc0 sc0 ls0 ws0">output for the UART system.</div><div class="t m0 x83 h7 y42bb ff2 fs4 fc0 sc0 ls0 ws0">When the UART is configured for single-wire operation (LOOPS = RSRC = 1), TXDIR controls the</div><div class="t m0 x83 h7 y42bc ff2 fs4 fc0 sc0 ls0 ws0">direction of traffic on the single UART communication line (TxD pin).</div><div class="t m0 x83 h7 y42bd ff2 fs4 fc0 sc0 ls0 ws0">TE can also queue an idle character by clearing TE then setting TE while a transmission is in progress.</div><div class="t m0 x83 h7 y42be ff2 fs4 fc0 sc0 ls0 ws0">When TE is written to 0, the transmitter keeps control of the port TxD pin until any data, queued idle, or</div><div class="t m0 x83 h7 y42bf ff2 fs4 fc0 sc0 ls0 ws0">queued break character finishes transmitting before allowing the pin to revert to a general-purpose I/O pin.</div><div class="t m0 x83 h7 y42c0 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>Transmitter off.</div><div class="t m0 x83 h7 y42c1 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>Transmitter on.</div><div class="t m0 x97 h7 y42c2 ff2 fs4 fc0 sc0 ls0">2</div><div class="t m0 x8b h7 y42c3 ff2 fs4 fc0 sc0 ls0">RE</div><div class="t m0 x83 h7 y42c2 ff2 fs4 fc0 sc0 ls0 ws0">Receiver Enable</div><div class="t m0 x83 h7 y42c4 ff2 fs4 fc0 sc0 ls0 ws0">When the UART receiver is off, the RxD pin reverts to being a general-purpose port I/O pin. If LOOPS is</div><div class="t m0 x83 h7 y42c5 ff2 fs4 fc0 sc0 ls0 ws0">set the RxD pin reverts to being a general-purpose I/O pin even if RE is set.</div><div class="t m0 x83 h7 y42c6 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>Receiver off.</div><div class="t m0 x83 h7 y42c7 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>Receiver on.</div><div class="t m0 x97 h7 y42c8 ff2 fs4 fc0 sc0 ls0">1</div><div class="t m0 x3a h7 y42c9 ff2 fs4 fc0 sc0 ls0">RWU</div><div class="t m0 x83 h7 y42c8 ff2 fs4 fc0 sc0 ls0 ws0">Receiver Wakeup Control</div><div class="t m0 x83 h7 y42ca ff2 fs4 fc0 sc0 ls0 ws0">This bit can be written to 1 to place the UART receiver in a standby state where it waits for automatic</div><div class="t m0 x83 h7 y42cb ff2 fs4 fc0 sc0 ls0 ws0">hardware detection of a selected wakeup condition. The wakeup condition is an idle line between</div><div class="t m0 x83 h7 y42cc ff2 fs4 fc0 sc0 ls0 ws0">messages, WAKE = 0, idle-line wakeup, or a logic 1 in the most significant data bit in a character, WAKE =</div><div class="t m0 x83 h7 y42cd ff2 fs4 fc0 sc0 ls0 ws0">1, address-mark wakeup. Application software sets RWU and, normally, a selected hardware condition</div><div class="t m0 x83 h7 y42ce ff2 fs4 fc0 sc0 ls0 ws0">automatically clears RWU.</div><div class="t m0 x83 h7 y42cf ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>Normal UART receiver operation.</div><div class="t m0 x83 h7 y42d0 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>UART receiver in standby waiting for wakeup condition.</div><div class="t m0 x97 h7 y42d1 ff2 fs4 fc0 sc0 ls0">0</div><div class="t m0 x12c h7 y42d2 ff2 fs4 fc0 sc0 ls0">SBK</div><div class="t m0 x83 h7 y42d1 ff2 fs4 fc0 sc0 ls0 ws0">Send Break</div><div class="t m0 x83 h7 y42d3 ff2 fs4 fc0 sc0 ls0 ws0">Writing a 1 and then a 0 to SBK queues a break character in the transmit data stream. Additional break</div><div class="t m0 x83 h7 y42d4 ff2 fs4 fc0 sc0 ls0 ws0">characters of 10 or 11 or 12, 13 or 14 or 15 if BRK13 = 1, bit times of logic 0 are queued as long as SBK is</div><div class="t m0 x83 h7 y42d5 ff2 fs4 fc0 sc0 ls0 ws0">set. Depending on the timing of the set and clear of SBK relative to the information currently being</div><div class="t m0 x83 h7 y42d6 ff2 fs4 fc0 sc0 ls0 ws0">transmitted, a second break character may be queued before software clears SBK.</div><div class="t m0 x1b h7 y42d7 ff5 fs4 fc0 sc0 ls0 ws0">Table continues on the next page...</div><div class="t m0 x9 h10 ydd ff1 fs4 fc0 sc0 ls0 ws0">Register definition</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">754<span class="_ _113"> </span>Freescale Semiconductor, Inc.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
