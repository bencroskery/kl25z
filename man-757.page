<div id="pf2f5" class="pf w0 h0" data-page-no="2f5"><div class="pc pc2f5 w0 h0"><img class="bi x0 y8 w3 h5" alt="" src="bg2f5.png"/><div class="t m0 x9 hf yf6 ff3 fs5 fc0 sc0 ls0 ws0">When using an internal oscillator in a LIN system, it is necessary to raise the break</div><div class="t m0 x9 hf yf7 ff3 fs5 fc0 sc0 ls0 ws0">detection threshold one bit time. Under the worst case timing conditions allowed in LIN,</div><div class="t m0 x9 hf yf8 ff3 fs5 fc0 sc0 ls0 ws0">it is possible that a 0x00 data character can appear to be 10.26 bit times long at a slave</div><div class="t m0 x9 hf yf9 ff3 fs5 fc0 sc0 ls0 ws0">running 14% faster than the master. This would trigger normal break detection circuitry</div><div class="t m0 x9 hf yfa ff3 fs5 fc0 sc0 ls0 ws0">designed to detect a 10-bit break symbol. When the LBKDE bit is set, framing errors are</div><div class="t m0 x9 hf yfb ff3 fs5 fc0 sc0 ls0 ws0">inhibited and the break detection threshold changes from 10 bits to 11 bits, preventing</div><div class="t m0 x9 hf yfc ff3 fs5 fc0 sc0 ls0 ws0">false detection of a 0x00 data character as a LIN break symbol.</div><div class="t m0 x9 h7 y263 ff2 fs4 fc0 sc0 ls0 ws0">Address: Base address + h offset</div><div class="t m0 x81 h1d y4319 ff2 fsd fc0 sc0 ls0 ws284">Bit<span class="_ _165"> </span>7 6 5 4 3 2 1 0</div><div class="t m0 x1 h7 y431a ff2 fs4 fc0 sc0 ls0 ws4d0">Read <span class="ws2b4 v15">LBKDIF RXEDGIF<span class="_ _12f"> </span></span><span class="ls2a8">0</span><span class="ws4dc v15">RXINV<span class="_ _53"> </span>RWUID BRK13<span class="_ _53"> </span>LBKDE<span class="_ _1b2"> </span></span>RAF</div><div class="t m0 x8b h7 y10fe ff2 fs4 fc0 sc0 ls0">Write</div><div class="t m0 x12c h7 y431b ff2 fs4 fc0 sc0 ls0 ws289">Reset <span class="ls1c4 ws28a v1b">00000000<span class="_ _19a"></span></span></div><div class="t m0 x1d h9 y431c ff1 fs2 fc0 sc0 ls0 ws20b">UART<span class="ff7">x</span><span class="ws0">_S2 field descriptions</span></div><div class="t m0 x12c h10 y431d ff1 fs4 fc0 sc0 ls0 ws259">Field Description</div><div class="t m0 x97 h7 y431e ff2 fs4 fc0 sc0 ls0">7</div><div class="t m0 x4f h7 y431f ff2 fs4 fc0 sc0 ls0">LBKDIF</div><div class="t m0 x83 h7 y431e ff2 fs4 fc0 sc0 ls0 ws0">LIN Break Detect Interrupt Flag</div><div class="t m0 x83 h7 y1105 ff2 fs4 fc0 sc0 ls0 ws0">LBKDIF is set when the LIN break detect circuitry is enabled and a LIN break character is detected.</div><div class="t m0 x83 h7 y4320 ff2 fs4 fc0 sc0 ls0 ws0">LBKDIF is cleared by writing a 1 to it.</div><div class="t m0 x83 h7 y4321 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>No LIN break character has been detected.</div><div class="t m0 x83 h7 y1263 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>LIN break character has been detected.</div><div class="t m0 x97 h7 y38d8 ff2 fs4 fc0 sc0 ls0">6</div><div class="t m0 x91 h7 y4322 ff2 fs4 fc0 sc0 ls0">RXEDGIF</div><div class="t m0 x83 h7 y38d8 ff2 fs4 fc0 sc0 ls0 ws0">RxD Pin Active Edge Interrupt Flag</div><div class="t m0 x83 h7 y60c ff2 fs4 fc0 sc0 ls0 ws0">RXEDGIF is set when an active edge, falling if RXINV = 0, rising if RXINV=1, on the RxD pin occurs.</div><div class="t m0 x83 h7 y4323 ff2 fs4 fc0 sc0 ls0 ws0">RXEDGIF is cleared by writing a 1 to it.</div><div class="t m0 x83 h7 y4324 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>No active edge on the receive pin has occurred.</div><div class="t m0 x83 h7 y29f3 ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>An active edge on the receive pin has occurred.</div><div class="t m0 x97 h7 y4325 ff2 fs4 fc0 sc0 ls0">5</div><div class="t m0 x91 h7 y4326 ff2 fs4 fc0 sc0 ls0">Reserved</div><div class="t m0 x83 h7 y4325 ff2 fs4 fc0 sc0 ls0 ws0">This field is reserved.</div><div class="t m0 x83 h7 y4326 ff2 fs4 fc0 sc0 ls0 ws0">This read-only field is reserved and always has the value 0.</div><div class="t m0 x97 h7 y4327 ff2 fs4 fc0 sc0 ls0">4</div><div class="t m0 x34 h7 y4328 ff2 fs4 fc0 sc0 ls0">RXINV</div><div class="t m0 x83 h7 y4327 ff2 fs4 fc0 sc0 ls0 ws0">Receive Data Inversion</div><div class="t m0 x83 h7 y11bd ff2 fs4 fc0 sc0 ls0 ws0">Setting this bit reverses the polarity of the received data input.</div><div class="t m0 x83 h10 y4329 ff1 fs4 fc0 sc0 ls0 ws212">NOTE: <span class="ff2 ws0">Setting RXINV inverts the RxD input for all cases: data bits, start and stop bits, break, and idle.</span></div><div class="t m0 x83 h7 y432a ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>Receive data not inverted.</div><div class="t m0 x83 h7 y432b ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>Receive data inverted.</div><div class="t m0 x97 h7 y432c ff2 fs4 fc0 sc0 ls0">3</div><div class="t m0 x4f h7 y1b57 ff2 fs4 fc0 sc0 ls0">RWUID</div><div class="t m0 x83 h7 y432c ff2 fs4 fc0 sc0 ls0 ws0">Receive Wake Up Idle Detect</div><div class="t m0 x83 h7 y432d ff2 fs4 fc0 sc0 ls0 ws0">RWUID controls whether the idle character that wakes up the receiver sets the IDLE bit.</div><div class="t m0 x83 h7 y1b59 ff2 fs4 fc0 sc0 ls0 ws0">0<span class="_ _28"> </span>During receive standby state (RWU = 1), the IDLE bit does not get set upon detection of an idle</div><div class="t m0 x5 h7 y432e ff2 fs4 fc0 sc0 ls0">character.</div><div class="t m0 x83 h7 y432f ff2 fs4 fc0 sc0 ls0 ws0">1<span class="_ _28"> </span>During receive standby state (RWU = 1), the IDLE bit gets set upon detection of an idle character.</div><div class="t m0 x97 h7 y40aa ff2 fs4 fc0 sc0 ls0">2</div><div class="t m0 x117 h7 y4330 ff2 fs4 fc0 sc0 ls0">BRK13</div><div class="t m0 x83 h7 y40aa ff2 fs4 fc0 sc0 ls0 ws0">Break Character Generation Length</div><div class="t m0 x1b h7 y4331 ff5 fs4 fc0 sc0 ls0 ws0">Table continues on the next page...</div><div class="t m0 x21 h10 y17b ff1 fs4 fc0 sc0 ls0 ws0">Chapter 40 Universal Asynchronous Receiver/Transmitter (UART1 and UART2)</div><div class="t m0 x8 h6 y9 ff1 fs3 fc0 sc0 ls0 ws0">KL25 Sub-Family Reference Manual, Rev. 3, September 2012</div><div class="t m0 x9 h7 ya ff2 fs4 fc0 sc0 ls0 ws0">Freescale Semiconductor, Inc.<span class="_ _113"> </span>757</div><a class="l" href="#pf2f5" data-dest-detail='[757,"XYZ",null,476.35,null]'><div class="d m1" style="border-style:none;position:absolute;left:122.245000px;bottom:550.850000px;width:31.510000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf2f5" data-dest-detail='[757,"XYZ",null,394.85,null]'><div class="d m1" style="border-style:none;position:absolute;left:173.997000px;bottom:550.850000px;width:40.006000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf2f5" data-dest-detail='[757,"XYZ",null,313.35,null]'><div class="d m1" style="border-style:none;position:absolute;left:247.498000px;bottom:559.850000px;width:5.004000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf2f5" data-dest-detail='[757,"XYZ",null,286.85,null]'><div class="d m1" style="border-style:none;position:absolute;left:292.248000px;bottom:550.850000px;width:27.504000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf2f5" data-dest-detail='[757,"XYZ",null,197.35,null]'><div class="d m1" style="border-style:none;position:absolute;left:346.754000px;bottom:550.850000px;width:30.492000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf2f5" data-dest-detail='[757,"XYZ",null,115.85,null]'><div class="d m1" style="border-style:none;position:absolute;left:403.744000px;bottom:550.850000px;width:28.512000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf2f6" data-dest-detail='[758,"XYZ",null,604.917,null]'><div class="d m1" style="border-style:none;position:absolute;left:459.245000px;bottom:550.850000px;width:29.510000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf2f6" data-dest-detail='[758,"XYZ",null,501.417,null]'><div class="d m1" style="border-style:none;position:absolute;left:521.000000px;bottom:559.850000px;width:18.000000px;height:9.000000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
